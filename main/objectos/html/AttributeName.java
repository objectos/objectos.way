/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.html;

/**
 * The name of a HTML attribute.
 */
// Generated by objectos.selfgen.HtmlSpec. Do not edit!
public sealed abstract class AttributeName permits WayAttributeName {

  static WayAttributeName.Builder BUILDER = new WayAttributeName.Builder();

  /**
   * The {@code accesskey} attribute.
   */
  public static final AttributeName ACCESSKEY = BUILDER.create("accesskey", false);

  /**
   * The {@code action} attribute.
   */
  public static final AttributeName ACTION = BUILDER.create("action", false);

  /**
   * The {@code align} attribute.
   */
  public static final AttributeName ALIGN = BUILDER.create("align", false);

  /**
   * The {@code alignment-baseline} attribute.
   */
  public static final AttributeName ALIGNMENT_BASELINE = BUILDER.create("alignment-baseline", false);

  /**
   * The {@code alt} attribute.
   */
  public static final AttributeName ALT = BUILDER.create("alt", false);

  /**
   * The {@code aria-hidden} attribute.
   */
  public static final AttributeName ARIA_HIDDEN = BUILDER.create("aria-hidden", false);

  /**
   * The {@code async} attribute.
   */
  public static final AttributeName ASYNC = BUILDER.create("async", true);

  /**
   * The {@code autocomplete} attribute.
   */
  public static final AttributeName AUTOCOMPLETE = BUILDER.create("autocomplete", false);

  /**
   * The {@code autofocus} attribute.
   */
  public static final AttributeName AUTOFOCUS = BUILDER.create("autofocus", true);

  /**
   * The {@code baseline-shift} attribute.
   */
  public static final AttributeName BASELINE_SHIFT = BUILDER.create("baseline-shift", false);

  /**
   * The {@code border} attribute.
   */
  public static final AttributeName BORDER = BUILDER.create("border", false);

  /**
   * The {@code cellpadding} attribute.
   */
  public static final AttributeName CELLPADDING = BUILDER.create("cellpadding", false);

  /**
   * The {@code cellspacing} attribute.
   */
  public static final AttributeName CELLSPACING = BUILDER.create("cellspacing", false);

  /**
   * The {@code charset} attribute.
   */
  public static final AttributeName CHARSET = BUILDER.create("charset", false);

  /**
   * The {@code cite} attribute.
   */
  public static final AttributeName CITE = BUILDER.create("cite", false);

  /**
   * The {@code class} attribute.
   */
  public static final AttributeName CLASS = BUILDER.create("class", false);

  /**
   * The {@code clip-path} attribute.
   */
  public static final AttributeName CLIP_PATH = BUILDER.create("clip-path", false);

  /**
   * The {@code clip-rule} attribute.
   */
  public static final AttributeName CLIP_RULE = BUILDER.create("clip-rule", false);

  /**
   * The {@code color} attribute.
   */
  public static final AttributeName COLOR = BUILDER.create("color", false);

  /**
   * The {@code color-interpolation} attribute.
   */
  public static final AttributeName COLOR_INTERPOLATION = BUILDER.create("color-interpolation", false);

  /**
   * The {@code color-interpolation-filters} attribute.
   */
  public static final AttributeName COLOR_INTERPOLATION_FILTERS = BUILDER.create("color-interpolation-filters", false);

  /**
   * The {@code cols} attribute.
   */
  public static final AttributeName COLS = BUILDER.create("cols", false);

  /**
   * The {@code content} attribute.
   */
  public static final AttributeName CONTENT = BUILDER.create("content", false);

  /**
   * The {@code contenteditable} attribute.
   */
  public static final AttributeName CONTENTEDITABLE = BUILDER.create("contenteditable", false);

  /**
   * The {@code crossorigin} attribute.
   */
  public static final AttributeName CROSSORIGIN = BUILDER.create("crossorigin", false);

  /**
   * The {@code cursor} attribute.
   */
  public static final AttributeName CURSOR = BUILDER.create("cursor", false);

  /**
   * The {@code d} attribute.
   */
  public static final AttributeName D = BUILDER.create("d", false);

  /**
   * The {@code data-frame} attribute.
   */
  public static final AttributeName DATA_FRAME = BUILDER.create("data-frame", false);

  /**
   * The {@code data-frame-value} attribute.
   */
  public static final AttributeName DATA_FRAME_VALUE = BUILDER.create("data-frame-value", false);

  /**
   * The {@code data-way-click} attribute.
   */
  public static final AttributeName DATA_WAY_CLICK = BUILDER.create("data-way-click", false);

  /**
   * The {@code defer} attribute.
   */
  public static final AttributeName DEFER = BUILDER.create("defer", true);

  /**
   * The {@code dir} attribute.
   */
  public static final AttributeName DIR = BUILDER.create("dir", false);

  /**
   * The {@code direction} attribute.
   */
  public static final AttributeName DIRECTION = BUILDER.create("direction", false);

  /**
   * The {@code dirname} attribute.
   */
  public static final AttributeName DIRNAME = BUILDER.create("dirname", false);

  /**
   * The {@code disabled} attribute.
   */
  public static final AttributeName DISABLED = BUILDER.create("disabled", true);

  /**
   * The {@code display} attribute.
   */
  public static final AttributeName DISPLAY = BUILDER.create("display", false);

  /**
   * The {@code dominant-baseline} attribute.
   */
  public static final AttributeName DOMINANT_BASELINE = BUILDER.create("dominant-baseline", false);

  /**
   * The {@code draggable} attribute.
   */
  public static final AttributeName DRAGGABLE = BUILDER.create("draggable", false);

  /**
   * The {@code enctype} attribute.
   */
  public static final AttributeName ENCTYPE = BUILDER.create("enctype", false);

  /**
   * The {@code fill} attribute.
   */
  public static final AttributeName FILL = BUILDER.create("fill", false);

  /**
   * The {@code fill-opacity} attribute.
   */
  public static final AttributeName FILL_OPACITY = BUILDER.create("fill-opacity", false);

  /**
   * The {@code fill-rule} attribute.
   */
  public static final AttributeName FILL_RULE = BUILDER.create("fill-rule", false);

  /**
   * The {@code filter} attribute.
   */
  public static final AttributeName FILTER = BUILDER.create("filter", false);

  /**
   * The {@code flood-color} attribute.
   */
  public static final AttributeName FLOOD_COLOR = BUILDER.create("flood-color", false);

  /**
   * The {@code flood-opacity} attribute.
   */
  public static final AttributeName FLOOD_OPACITY = BUILDER.create("flood-opacity", false);

  /**
   * The {@code font-family} attribute.
   */
  public static final AttributeName FONT_FAMILY = BUILDER.create("font-family", false);

  /**
   * The {@code font-size} attribute.
   */
  public static final AttributeName FONT_SIZE = BUILDER.create("font-size", false);

  /**
   * The {@code font-size-adjust} attribute.
   */
  public static final AttributeName FONT_SIZE_ADJUST = BUILDER.create("font-size-adjust", false);

  /**
   * The {@code font-stretch} attribute.
   */
  public static final AttributeName FONT_STRETCH = BUILDER.create("font-stretch", false);

  /**
   * The {@code font-style} attribute.
   */
  public static final AttributeName FONT_STYLE = BUILDER.create("font-style", false);

  /**
   * The {@code font-variant} attribute.
   */
  public static final AttributeName FONT_VARIANT = BUILDER.create("font-variant", false);

  /**
   * The {@code font-weight} attribute.
   */
  public static final AttributeName FONT_WEIGHT = BUILDER.create("font-weight", false);

  /**
   * The {@code for} attribute.
   */
  public static final AttributeName FOR = BUILDER.create("for", false);

  /**
   * The {@code form} attribute.
   */
  public static final AttributeName FORM = BUILDER.create("form", false);

  /**
   * The {@code glyph-orientation-horizontal} attribute.
   */
  public static final AttributeName GLYPH_ORIENTATION_HORIZONTAL = BUILDER.create("glyph-orientation-horizontal", false);

  /**
   * The {@code glyph-orientation-vertical} attribute.
   */
  public static final AttributeName GLYPH_ORIENTATION_VERTICAL = BUILDER.create("glyph-orientation-vertical", false);

  /**
   * The {@code height} attribute.
   */
  public static final AttributeName HEIGHT = BUILDER.create("height", false);

  /**
   * The {@code hidden} attribute.
   */
  public static final AttributeName HIDDEN = BUILDER.create("hidden", true);

  /**
   * The {@code href} attribute.
   */
  public static final AttributeName HREF = BUILDER.create("href", false);

  /**
   * The {@code http-equiv} attribute.
   */
  public static final AttributeName HTTP_EQUIV = BUILDER.create("http-equiv", false);

  /**
   * The {@code id} attribute.
   */
  public static final AttributeName ID = BUILDER.create("id", false);

  /**
   * The {@code image-rendering} attribute.
   */
  public static final AttributeName IMAGE_RENDERING = BUILDER.create("image-rendering", false);

  /**
   * The {@code integrity} attribute.
   */
  public static final AttributeName INTEGRITY = BUILDER.create("integrity", false);

  /**
   * The {@code label} attribute.
   */
  public static final AttributeName LABEL = BUILDER.create("label", false);

  /**
   * The {@code lang} attribute.
   */
  public static final AttributeName LANG = BUILDER.create("lang", false);

  /**
   * The {@code letter-spacing} attribute.
   */
  public static final AttributeName LETTER_SPACING = BUILDER.create("letter-spacing", false);

  /**
   * The {@code lighting-color} attribute.
   */
  public static final AttributeName LIGHTING_COLOR = BUILDER.create("lighting-color", false);

  /**
   * The {@code marker-end} attribute.
   */
  public static final AttributeName MARKER_END = BUILDER.create("marker-end", false);

  /**
   * The {@code marker-mid} attribute.
   */
  public static final AttributeName MARKER_MID = BUILDER.create("marker-mid", false);

  /**
   * The {@code marker-start} attribute.
   */
  public static final AttributeName MARKER_START = BUILDER.create("marker-start", false);

  /**
   * The {@code mask} attribute.
   */
  public static final AttributeName MASK = BUILDER.create("mask", false);

  /**
   * The {@code mask-type} attribute.
   */
  public static final AttributeName MASK_TYPE = BUILDER.create("mask-type", false);

  /**
   * The {@code maxlength} attribute.
   */
  public static final AttributeName MAXLENGTH = BUILDER.create("maxlength", false);

  /**
   * The {@code media} attribute.
   */
  public static final AttributeName MEDIA = BUILDER.create("media", false);

  /**
   * The {@code method} attribute.
   */
  public static final AttributeName METHOD = BUILDER.create("method", false);

  /**
   * The {@code minlength} attribute.
   */
  public static final AttributeName MINLENGTH = BUILDER.create("minlength", false);

  /**
   * The {@code multiple} attribute.
   */
  public static final AttributeName MULTIPLE = BUILDER.create("multiple", true);

  /**
   * The {@code name} attribute.
   */
  public static final AttributeName NAME = BUILDER.create("name", false);

  /**
   * The {@code nomodule} attribute.
   */
  public static final AttributeName NOMODULE = BUILDER.create("nomodule", true);

  /**
   * The {@code onafterprint} attribute.
   */
  public static final AttributeName ONAFTERPRINT = BUILDER.create("onafterprint", false);

  /**
   * The {@code onbeforeprint} attribute.
   */
  public static final AttributeName ONBEFOREPRINT = BUILDER.create("onbeforeprint", false);

  /**
   * The {@code onbeforeunload} attribute.
   */
  public static final AttributeName ONBEFOREUNLOAD = BUILDER.create("onbeforeunload", false);

  /**
   * The {@code onclick} attribute.
   */
  public static final AttributeName ONCLICK = BUILDER.create("onclick", false);

  /**
   * The {@code onhashchange} attribute.
   */
  public static final AttributeName ONHASHCHANGE = BUILDER.create("onhashchange", false);

  /**
   * The {@code onlanguagechange} attribute.
   */
  public static final AttributeName ONLANGUAGECHANGE = BUILDER.create("onlanguagechange", false);

  /**
   * The {@code onmessage} attribute.
   */
  public static final AttributeName ONMESSAGE = BUILDER.create("onmessage", false);

  /**
   * The {@code onoffline} attribute.
   */
  public static final AttributeName ONOFFLINE = BUILDER.create("onoffline", false);

  /**
   * The {@code ononline} attribute.
   */
  public static final AttributeName ONONLINE = BUILDER.create("ononline", false);

  /**
   * The {@code onpagehide} attribute.
   */
  public static final AttributeName ONPAGEHIDE = BUILDER.create("onpagehide", false);

  /**
   * The {@code onpageshow} attribute.
   */
  public static final AttributeName ONPAGESHOW = BUILDER.create("onpageshow", false);

  /**
   * The {@code onpopstate} attribute.
   */
  public static final AttributeName ONPOPSTATE = BUILDER.create("onpopstate", false);

  /**
   * The {@code onrejectionhandled} attribute.
   */
  public static final AttributeName ONREJECTIONHANDLED = BUILDER.create("onrejectionhandled", false);

  /**
   * The {@code onstorage} attribute.
   */
  public static final AttributeName ONSTORAGE = BUILDER.create("onstorage", false);

  /**
   * The {@code onsubmit} attribute.
   */
  public static final AttributeName ONSUBMIT = BUILDER.create("onsubmit", false);

  /**
   * The {@code onunhandledrejection} attribute.
   */
  public static final AttributeName ONUNHANDLEDREJECTION = BUILDER.create("onunhandledrejection", false);

  /**
   * The {@code onunload} attribute.
   */
  public static final AttributeName ONUNLOAD = BUILDER.create("onunload", false);

  /**
   * The {@code opacity} attribute.
   */
  public static final AttributeName OPACITY = BUILDER.create("opacity", false);

  /**
   * The {@code open} attribute.
   */
  public static final AttributeName OPEN = BUILDER.create("open", true);

  /**
   * The {@code overflow} attribute.
   */
  public static final AttributeName OVERFLOW = BUILDER.create("overflow", false);

  /**
   * The {@code paint-order} attribute.
   */
  public static final AttributeName PAINT_ORDER = BUILDER.create("paint-order", false);

  /**
   * The {@code placeholder} attribute.
   */
  public static final AttributeName PLACEHOLDER = BUILDER.create("placeholder", false);

  /**
   * The {@code pointer-events} attribute.
   */
  public static final AttributeName POINTER_EVENTS = BUILDER.create("pointer-events", false);

  /**
   * The {@code property} attribute.
   */
  public static final AttributeName PROPERTY = BUILDER.create("property", false);

  /**
   * The {@code readonly} attribute.
   */
  public static final AttributeName READONLY = BUILDER.create("readonly", true);

  /**
   * The {@code referrerpolicy} attribute.
   */
  public static final AttributeName REFERRERPOLICY = BUILDER.create("referrerpolicy", false);

  /**
   * The {@code rel} attribute.
   */
  public static final AttributeName REL = BUILDER.create("rel", false);

  /**
   * The {@code required} attribute.
   */
  public static final AttributeName REQUIRED = BUILDER.create("required", true);

  /**
   * The {@code rev} attribute.
   */
  public static final AttributeName REV = BUILDER.create("rev", false);

  /**
   * The {@code reversed} attribute.
   */
  public static final AttributeName REVERSED = BUILDER.create("reversed", true);

  /**
   * The {@code role} attribute.
   */
  public static final AttributeName ROLE = BUILDER.create("role", false);

  /**
   * The {@code rows} attribute.
   */
  public static final AttributeName ROWS = BUILDER.create("rows", false);

  /**
   * The {@code selected} attribute.
   */
  public static final AttributeName SELECTED = BUILDER.create("selected", true);

  /**
   * The {@code shape-rendering} attribute.
   */
  public static final AttributeName SHAPE_RENDERING = BUILDER.create("shape-rendering", false);

  /**
   * The {@code size} attribute.
   */
  public static final AttributeName SIZE = BUILDER.create("size", false);

  /**
   * The {@code sizes} attribute.
   */
  public static final AttributeName SIZES = BUILDER.create("sizes", false);

  /**
   * The {@code spellcheck} attribute.
   */
  public static final AttributeName SPELLCHECK = BUILDER.create("spellcheck", false);

  /**
   * The {@code src} attribute.
   */
  public static final AttributeName SRC = BUILDER.create("src", false);

  /**
   * The {@code srcset} attribute.
   */
  public static final AttributeName SRCSET = BUILDER.create("srcset", false);

  /**
   * The {@code start} attribute.
   */
  public static final AttributeName START = BUILDER.create("start", false);

  /**
   * The {@code stop-color} attribute.
   */
  public static final AttributeName STOP_COLOR = BUILDER.create("stop-color", false);

  /**
   * The {@code stop-opacity} attribute.
   */
  public static final AttributeName STOP_OPACITY = BUILDER.create("stop-opacity", false);

  /**
   * The {@code stroke} attribute.
   */
  public static final AttributeName STROKE = BUILDER.create("stroke", false);

  /**
   * The {@code stroke-dasharray} attribute.
   */
  public static final AttributeName STROKE_DASHARRAY = BUILDER.create("stroke-dasharray", false);

  /**
   * The {@code stroke-dashoffset} attribute.
   */
  public static final AttributeName STROKE_DASHOFFSET = BUILDER.create("stroke-dashoffset", false);

  /**
   * The {@code stroke-linecap} attribute.
   */
  public static final AttributeName STROKE_LINECAP = BUILDER.create("stroke-linecap", false);

  /**
   * The {@code stroke-linejoin} attribute.
   */
  public static final AttributeName STROKE_LINEJOIN = BUILDER.create("stroke-linejoin", false);

  /**
   * The {@code stroke-miterlimit} attribute.
   */
  public static final AttributeName STROKE_MITERLIMIT = BUILDER.create("stroke-miterlimit", false);

  /**
   * The {@code stroke-opacity} attribute.
   */
  public static final AttributeName STROKE_OPACITY = BUILDER.create("stroke-opacity", false);

  /**
   * The {@code stroke-width} attribute.
   */
  public static final AttributeName STROKE_WIDTH = BUILDER.create("stroke-width", false);

  /**
   * The {@code style} attribute.
   */
  public static final AttributeName STYLE = BUILDER.create("style", false);

  /**
   * The {@code tabindex} attribute.
   */
  public static final AttributeName TABINDEX = BUILDER.create("tabindex", false);

  /**
   * The {@code target} attribute.
   */
  public static final AttributeName TARGET = BUILDER.create("target", false);

  /**
   * The {@code text-anchor} attribute.
   */
  public static final AttributeName TEXT_ANCHOR = BUILDER.create("text-anchor", false);

  /**
   * The {@code text-decoration} attribute.
   */
  public static final AttributeName TEXT_DECORATION = BUILDER.create("text-decoration", false);

  /**
   * The {@code text-overflow} attribute.
   */
  public static final AttributeName TEXT_OVERFLOW = BUILDER.create("text-overflow", false);

  /**
   * The {@code text-rendering} attribute.
   */
  public static final AttributeName TEXT_RENDERING = BUILDER.create("text-rendering", false);

  /**
   * The {@code title} attribute.
   */
  public static final AttributeName TITLE = BUILDER.create("title", false);

  /**
   * The {@code transform} attribute.
   */
  public static final AttributeName TRANSFORM = BUILDER.create("transform", false);

  /**
   * The {@code transform-origin} attribute.
   */
  public static final AttributeName TRANSFORM_ORIGIN = BUILDER.create("transform-origin", false);

  /**
   * The {@code translate} attribute.
   */
  public static final AttributeName TRANSLATE = BUILDER.create("translate", false);

  /**
   * The {@code type} attribute.
   */
  public static final AttributeName TYPE = BUILDER.create("type", false);

  /**
   * The {@code unicode-bidi} attribute.
   */
  public static final AttributeName UNICODE_BIDI = BUILDER.create("unicode-bidi", false);

  /**
   * The {@code value} attribute.
   */
  public static final AttributeName VALUE = BUILDER.create("value", false);

  /**
   * The {@code vector-effect} attribute.
   */
  public static final AttributeName VECTOR_EFFECT = BUILDER.create("vector-effect", false);

  /**
   * The {@code viewBox} attribute.
   */
  public static final AttributeName VIEWBOX = BUILDER.create("viewBox", false);

  /**
   * The {@code visibility} attribute.
   */
  public static final AttributeName VISIBILITY = BUILDER.create("visibility", false);

  /**
   * The {@code white-space} attribute.
   */
  public static final AttributeName WHITE_SPACE = BUILDER.create("white-space", false);

  /**
   * The {@code width} attribute.
   */
  public static final AttributeName WIDTH = BUILDER.create("width", false);

  /**
   * The {@code word-spacing} attribute.
   */
  public static final AttributeName WORD_SPACING = BUILDER.create("word-spacing", false);

  /**
   * The {@code wrap} attribute.
   */
  public static final AttributeName WRAP = BUILDER.create("wrap", false);

  /**
   * The {@code writing-mode} attribute.
   */
  public static final AttributeName WRITING_MODE = BUILDER.create("writing-mode", false);

  /**
   * The {@code xmlns} attribute.
   */
  public static final AttributeName XMLNS = BUILDER.create("xmlns", false);

  static {
    WayAttributeName.set(BUILDER);

    BUILDER = null;
  }

  AttributeName() {}

  /**
   * Returns the index of this attribute.
   *
   * @return the index of this attribute.
   */
  public abstract int index();

  /**
   * Returns the name of the attribute.
   *
   * @return the name of the attribute
   */
  public abstract String name();

  /**
   * Returns {@code true} if this is the name of a boolean atttribute and {@code false} otherwise.
   *
   * @return {@code true} if this is the name of a boolean atttribute and {@code false} otherwise
   */
  public abstract boolean booleanAttribute();

}
