/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.html;

// Generated by objectos.selfgen.HtmlSpec. Do not edit!
abstract class GeneratedAttributeName {

  GeneratedAttributeName() {}

  /**
   * The {@code accesskey} attribute.
   */
  public static final AttributeName ACCESSKEY = WayAttributeNameBuilder.create("accesskey", false);

  /**
   * The {@code action} attribute.
   */
  public static final AttributeName ACTION = WayAttributeNameBuilder.create("action", false);

  /**
   * The {@code align} attribute.
   */
  public static final AttributeName ALIGN = WayAttributeNameBuilder.create("align", false);

  /**
   * The {@code alignment-baseline} attribute.
   */
  public static final AttributeName ALIGNMENT_BASELINE = WayAttributeNameBuilder.create("alignment-baseline", false);

  /**
   * The {@code alt} attribute.
   */
  public static final AttributeName ALT = WayAttributeNameBuilder.create("alt", false);

  /**
   * The {@code aria-hidden} attribute.
   */
  public static final AttributeName ARIA_HIDDEN = WayAttributeNameBuilder.create("aria-hidden", false);

  /**
   * The {@code aria-label} attribute.
   */
  public static final AttributeName ARIA_LABEL = WayAttributeNameBuilder.create("aria-label", false);

  /**
   * The {@code async} attribute.
   */
  public static final AttributeName ASYNC = WayAttributeNameBuilder.create("async", true);

  /**
   * The {@code autocomplete} attribute.
   */
  public static final AttributeName AUTOCOMPLETE = WayAttributeNameBuilder.create("autocomplete", false);

  /**
   * The {@code autofocus} attribute.
   */
  public static final AttributeName AUTOFOCUS = WayAttributeNameBuilder.create("autofocus", true);

  /**
   * The {@code baseline-shift} attribute.
   */
  public static final AttributeName BASELINE_SHIFT = WayAttributeNameBuilder.create("baseline-shift", false);

  /**
   * The {@code border} attribute.
   */
  public static final AttributeName BORDER = WayAttributeNameBuilder.create("border", false);

  /**
   * The {@code cellpadding} attribute.
   */
  public static final AttributeName CELLPADDING = WayAttributeNameBuilder.create("cellpadding", false);

  /**
   * The {@code cellspacing} attribute.
   */
  public static final AttributeName CELLSPACING = WayAttributeNameBuilder.create("cellspacing", false);

  /**
   * The {@code charset} attribute.
   */
  public static final AttributeName CHARSET = WayAttributeNameBuilder.create("charset", false);

  /**
   * The {@code cite} attribute.
   */
  public static final AttributeName CITE = WayAttributeNameBuilder.create("cite", false);

  /**
   * The {@code class} attribute.
   */
  public static final AttributeName CLASS = WayAttributeNameBuilder.create("class", false);

  /**
   * The {@code clip-path} attribute.
   */
  public static final AttributeName CLIP_PATH = WayAttributeNameBuilder.create("clip-path", false);

  /**
   * The {@code clip-rule} attribute.
   */
  public static final AttributeName CLIP_RULE = WayAttributeNameBuilder.create("clip-rule", false);

  /**
   * The {@code color} attribute.
   */
  public static final AttributeName COLOR = WayAttributeNameBuilder.create("color", false);

  /**
   * The {@code color-interpolation} attribute.
   */
  public static final AttributeName COLOR_INTERPOLATION = WayAttributeNameBuilder.create("color-interpolation", false);

  /**
   * The {@code color-interpolation-filters} attribute.
   */
  public static final AttributeName COLOR_INTERPOLATION_FILTERS = WayAttributeNameBuilder.create("color-interpolation-filters", false);

  /**
   * The {@code cols} attribute.
   */
  public static final AttributeName COLS = WayAttributeNameBuilder.create("cols", false);

  /**
   * The {@code content} attribute.
   */
  public static final AttributeName CONTENT = WayAttributeNameBuilder.create("content", false);

  /**
   * The {@code contenteditable} attribute.
   */
  public static final AttributeName CONTENTEDITABLE = WayAttributeNameBuilder.create("contenteditable", false);

  /**
   * The {@code crossorigin} attribute.
   */
  public static final AttributeName CROSSORIGIN = WayAttributeNameBuilder.create("crossorigin", false);

  /**
   * The {@code cursor} attribute.
   */
  public static final AttributeName CURSOR = WayAttributeNameBuilder.create("cursor", false);

  /**
   * The {@code d} attribute.
   */
  public static final AttributeName D = WayAttributeNameBuilder.create("d", false);

  /**
   * The {@code defer} attribute.
   */
  public static final AttributeName DEFER = WayAttributeNameBuilder.create("defer", true);

  /**
   * The {@code dir} attribute.
   */
  public static final AttributeName DIR = WayAttributeNameBuilder.create("dir", false);

  /**
   * The {@code direction} attribute.
   */
  public static final AttributeName DIRECTION = WayAttributeNameBuilder.create("direction", false);

  /**
   * The {@code dirname} attribute.
   */
  public static final AttributeName DIRNAME = WayAttributeNameBuilder.create("dirname", false);

  /**
   * The {@code disabled} attribute.
   */
  public static final AttributeName DISABLED = WayAttributeNameBuilder.create("disabled", true);

  /**
   * The {@code display} attribute.
   */
  public static final AttributeName DISPLAY = WayAttributeNameBuilder.create("display", false);

  /**
   * The {@code dominant-baseline} attribute.
   */
  public static final AttributeName DOMINANT_BASELINE = WayAttributeNameBuilder.create("dominant-baseline", false);

  /**
   * The {@code draggable} attribute.
   */
  public static final AttributeName DRAGGABLE = WayAttributeNameBuilder.create("draggable", false);

  /**
   * The {@code enctype} attribute.
   */
  public static final AttributeName ENCTYPE = WayAttributeNameBuilder.create("enctype", false);

  /**
   * The {@code fill} attribute.
   */
  public static final AttributeName FILL = WayAttributeNameBuilder.create("fill", false);

  /**
   * The {@code fill-opacity} attribute.
   */
  public static final AttributeName FILL_OPACITY = WayAttributeNameBuilder.create("fill-opacity", false);

  /**
   * The {@code fill-rule} attribute.
   */
  public static final AttributeName FILL_RULE = WayAttributeNameBuilder.create("fill-rule", false);

  /**
   * The {@code filter} attribute.
   */
  public static final AttributeName FILTER = WayAttributeNameBuilder.create("filter", false);

  /**
   * The {@code flood-color} attribute.
   */
  public static final AttributeName FLOOD_COLOR = WayAttributeNameBuilder.create("flood-color", false);

  /**
   * The {@code flood-opacity} attribute.
   */
  public static final AttributeName FLOOD_OPACITY = WayAttributeNameBuilder.create("flood-opacity", false);

  /**
   * The {@code font-family} attribute.
   */
  public static final AttributeName FONT_FAMILY = WayAttributeNameBuilder.create("font-family", false);

  /**
   * The {@code font-size} attribute.
   */
  public static final AttributeName FONT_SIZE = WayAttributeNameBuilder.create("font-size", false);

  /**
   * The {@code font-size-adjust} attribute.
   */
  public static final AttributeName FONT_SIZE_ADJUST = WayAttributeNameBuilder.create("font-size-adjust", false);

  /**
   * The {@code font-stretch} attribute.
   */
  public static final AttributeName FONT_STRETCH = WayAttributeNameBuilder.create("font-stretch", false);

  /**
   * The {@code font-style} attribute.
   */
  public static final AttributeName FONT_STYLE = WayAttributeNameBuilder.create("font-style", false);

  /**
   * The {@code font-variant} attribute.
   */
  public static final AttributeName FONT_VARIANT = WayAttributeNameBuilder.create("font-variant", false);

  /**
   * The {@code font-weight} attribute.
   */
  public static final AttributeName FONT_WEIGHT = WayAttributeNameBuilder.create("font-weight", false);

  /**
   * The {@code for} attribute.
   */
  public static final AttributeName FOR = WayAttributeNameBuilder.create("for", false);

  /**
   * The {@code form} attribute.
   */
  public static final AttributeName FORM = WayAttributeNameBuilder.create("form", false);

  /**
   * The {@code glyph-orientation-horizontal} attribute.
   */
  public static final AttributeName GLYPH_ORIENTATION_HORIZONTAL = WayAttributeNameBuilder.create("glyph-orientation-horizontal", false);

  /**
   * The {@code glyph-orientation-vertical} attribute.
   */
  public static final AttributeName GLYPH_ORIENTATION_VERTICAL = WayAttributeNameBuilder.create("glyph-orientation-vertical", false);

  /**
   * The {@code height} attribute.
   */
  public static final AttributeName HEIGHT = WayAttributeNameBuilder.create("height", false);

  /**
   * The {@code hidden} attribute.
   */
  public static final AttributeName HIDDEN = WayAttributeNameBuilder.create("hidden", true);

  /**
   * The {@code href} attribute.
   */
  public static final AttributeName HREF = WayAttributeNameBuilder.create("href", false);

  /**
   * The {@code http-equiv} attribute.
   */
  public static final AttributeName HTTP_EQUIV = WayAttributeNameBuilder.create("http-equiv", false);

  /**
   * The {@code id} attribute.
   */
  public static final AttributeName ID = WayAttributeNameBuilder.create("id", false);

  /**
   * The {@code image-rendering} attribute.
   */
  public static final AttributeName IMAGE_RENDERING = WayAttributeNameBuilder.create("image-rendering", false);

  /**
   * The {@code integrity} attribute.
   */
  public static final AttributeName INTEGRITY = WayAttributeNameBuilder.create("integrity", false);

  /**
   * The {@code label} attribute.
   */
  public static final AttributeName LABEL = WayAttributeNameBuilder.create("label", false);

  /**
   * The {@code lang} attribute.
   */
  public static final AttributeName LANG = WayAttributeNameBuilder.create("lang", false);

  /**
   * The {@code letter-spacing} attribute.
   */
  public static final AttributeName LETTER_SPACING = WayAttributeNameBuilder.create("letter-spacing", false);

  /**
   * The {@code lighting-color} attribute.
   */
  public static final AttributeName LIGHTING_COLOR = WayAttributeNameBuilder.create("lighting-color", false);

  /**
   * The {@code marker-end} attribute.
   */
  public static final AttributeName MARKER_END = WayAttributeNameBuilder.create("marker-end", false);

  /**
   * The {@code marker-mid} attribute.
   */
  public static final AttributeName MARKER_MID = WayAttributeNameBuilder.create("marker-mid", false);

  /**
   * The {@code marker-start} attribute.
   */
  public static final AttributeName MARKER_START = WayAttributeNameBuilder.create("marker-start", false);

  /**
   * The {@code mask} attribute.
   */
  public static final AttributeName MASK = WayAttributeNameBuilder.create("mask", false);

  /**
   * The {@code mask-type} attribute.
   */
  public static final AttributeName MASK_TYPE = WayAttributeNameBuilder.create("mask-type", false);

  /**
   * The {@code maxlength} attribute.
   */
  public static final AttributeName MAXLENGTH = WayAttributeNameBuilder.create("maxlength", false);

  /**
   * The {@code media} attribute.
   */
  public static final AttributeName MEDIA = WayAttributeNameBuilder.create("media", false);

  /**
   * The {@code method} attribute.
   */
  public static final AttributeName METHOD = WayAttributeNameBuilder.create("method", false);

  /**
   * The {@code minlength} attribute.
   */
  public static final AttributeName MINLENGTH = WayAttributeNameBuilder.create("minlength", false);

  /**
   * The {@code multiple} attribute.
   */
  public static final AttributeName MULTIPLE = WayAttributeNameBuilder.create("multiple", true);

  /**
   * The {@code name} attribute.
   */
  public static final AttributeName NAME = WayAttributeNameBuilder.create("name", false);

  /**
   * The {@code nomodule} attribute.
   */
  public static final AttributeName NOMODULE = WayAttributeNameBuilder.create("nomodule", true);

  /**
   * The {@code onafterprint} attribute.
   */
  public static final AttributeName ONAFTERPRINT = WayAttributeNameBuilder.create("onafterprint", false);

  /**
   * The {@code onbeforeprint} attribute.
   */
  public static final AttributeName ONBEFOREPRINT = WayAttributeNameBuilder.create("onbeforeprint", false);

  /**
   * The {@code onbeforeunload} attribute.
   */
  public static final AttributeName ONBEFOREUNLOAD = WayAttributeNameBuilder.create("onbeforeunload", false);

  /**
   * The {@code onclick} attribute.
   */
  public static final AttributeName ONCLICK = WayAttributeNameBuilder.create("onclick", false);

  /**
   * The {@code onhashchange} attribute.
   */
  public static final AttributeName ONHASHCHANGE = WayAttributeNameBuilder.create("onhashchange", false);

  /**
   * The {@code onlanguagechange} attribute.
   */
  public static final AttributeName ONLANGUAGECHANGE = WayAttributeNameBuilder.create("onlanguagechange", false);

  /**
   * The {@code onmessage} attribute.
   */
  public static final AttributeName ONMESSAGE = WayAttributeNameBuilder.create("onmessage", false);

  /**
   * The {@code onoffline} attribute.
   */
  public static final AttributeName ONOFFLINE = WayAttributeNameBuilder.create("onoffline", false);

  /**
   * The {@code ononline} attribute.
   */
  public static final AttributeName ONONLINE = WayAttributeNameBuilder.create("ononline", false);

  /**
   * The {@code onpagehide} attribute.
   */
  public static final AttributeName ONPAGEHIDE = WayAttributeNameBuilder.create("onpagehide", false);

  /**
   * The {@code onpageshow} attribute.
   */
  public static final AttributeName ONPAGESHOW = WayAttributeNameBuilder.create("onpageshow", false);

  /**
   * The {@code onpopstate} attribute.
   */
  public static final AttributeName ONPOPSTATE = WayAttributeNameBuilder.create("onpopstate", false);

  /**
   * The {@code onrejectionhandled} attribute.
   */
  public static final AttributeName ONREJECTIONHANDLED = WayAttributeNameBuilder.create("onrejectionhandled", false);

  /**
   * The {@code onstorage} attribute.
   */
  public static final AttributeName ONSTORAGE = WayAttributeNameBuilder.create("onstorage", false);

  /**
   * The {@code onsubmit} attribute.
   */
  public static final AttributeName ONSUBMIT = WayAttributeNameBuilder.create("onsubmit", false);

  /**
   * The {@code onunhandledrejection} attribute.
   */
  public static final AttributeName ONUNHANDLEDREJECTION = WayAttributeNameBuilder.create("onunhandledrejection", false);

  /**
   * The {@code onunload} attribute.
   */
  public static final AttributeName ONUNLOAD = WayAttributeNameBuilder.create("onunload", false);

  /**
   * The {@code opacity} attribute.
   */
  public static final AttributeName OPACITY = WayAttributeNameBuilder.create("opacity", false);

  /**
   * The {@code open} attribute.
   */
  public static final AttributeName OPEN = WayAttributeNameBuilder.create("open", true);

  /**
   * The {@code overflow} attribute.
   */
  public static final AttributeName OVERFLOW = WayAttributeNameBuilder.create("overflow", false);

  /**
   * The {@code paint-order} attribute.
   */
  public static final AttributeName PAINT_ORDER = WayAttributeNameBuilder.create("paint-order", false);

  /**
   * The {@code placeholder} attribute.
   */
  public static final AttributeName PLACEHOLDER = WayAttributeNameBuilder.create("placeholder", false);

  /**
   * The {@code pointer-events} attribute.
   */
  public static final AttributeName POINTER_EVENTS = WayAttributeNameBuilder.create("pointer-events", false);

  /**
   * The {@code property} attribute.
   */
  public static final AttributeName PROPERTY = WayAttributeNameBuilder.create("property", false);

  /**
   * The {@code readonly} attribute.
   */
  public static final AttributeName READONLY = WayAttributeNameBuilder.create("readonly", true);

  /**
   * The {@code referrerpolicy} attribute.
   */
  public static final AttributeName REFERRERPOLICY = WayAttributeNameBuilder.create("referrerpolicy", false);

  /**
   * The {@code rel} attribute.
   */
  public static final AttributeName REL = WayAttributeNameBuilder.create("rel", false);

  /**
   * The {@code required} attribute.
   */
  public static final AttributeName REQUIRED = WayAttributeNameBuilder.create("required", true);

  /**
   * The {@code rev} attribute.
   */
  public static final AttributeName REV = WayAttributeNameBuilder.create("rev", false);

  /**
   * The {@code reversed} attribute.
   */
  public static final AttributeName REVERSED = WayAttributeNameBuilder.create("reversed", true);

  /**
   * The {@code role} attribute.
   */
  public static final AttributeName ROLE = WayAttributeNameBuilder.create("role", false);

  /**
   * The {@code rows} attribute.
   */
  public static final AttributeName ROWS = WayAttributeNameBuilder.create("rows", false);

  /**
   * The {@code selected} attribute.
   */
  public static final AttributeName SELECTED = WayAttributeNameBuilder.create("selected", true);

  /**
   * The {@code shape-rendering} attribute.
   */
  public static final AttributeName SHAPE_RENDERING = WayAttributeNameBuilder.create("shape-rendering", false);

  /**
   * The {@code size} attribute.
   */
  public static final AttributeName SIZE = WayAttributeNameBuilder.create("size", false);

  /**
   * The {@code sizes} attribute.
   */
  public static final AttributeName SIZES = WayAttributeNameBuilder.create("sizes", false);

  /**
   * The {@code spellcheck} attribute.
   */
  public static final AttributeName SPELLCHECK = WayAttributeNameBuilder.create("spellcheck", false);

  /**
   * The {@code src} attribute.
   */
  public static final AttributeName SRC = WayAttributeNameBuilder.create("src", false);

  /**
   * The {@code srcset} attribute.
   */
  public static final AttributeName SRCSET = WayAttributeNameBuilder.create("srcset", false);

  /**
   * The {@code start} attribute.
   */
  public static final AttributeName START = WayAttributeNameBuilder.create("start", false);

  /**
   * The {@code stop-color} attribute.
   */
  public static final AttributeName STOP_COLOR = WayAttributeNameBuilder.create("stop-color", false);

  /**
   * The {@code stop-opacity} attribute.
   */
  public static final AttributeName STOP_OPACITY = WayAttributeNameBuilder.create("stop-opacity", false);

  /**
   * The {@code stroke} attribute.
   */
  public static final AttributeName STROKE = WayAttributeNameBuilder.create("stroke", false);

  /**
   * The {@code stroke-dasharray} attribute.
   */
  public static final AttributeName STROKE_DASHARRAY = WayAttributeNameBuilder.create("stroke-dasharray", false);

  /**
   * The {@code stroke-dashoffset} attribute.
   */
  public static final AttributeName STROKE_DASHOFFSET = WayAttributeNameBuilder.create("stroke-dashoffset", false);

  /**
   * The {@code stroke-linecap} attribute.
   */
  public static final AttributeName STROKE_LINECAP = WayAttributeNameBuilder.create("stroke-linecap", false);

  /**
   * The {@code stroke-linejoin} attribute.
   */
  public static final AttributeName STROKE_LINEJOIN = WayAttributeNameBuilder.create("stroke-linejoin", false);

  /**
   * The {@code stroke-miterlimit} attribute.
   */
  public static final AttributeName STROKE_MITERLIMIT = WayAttributeNameBuilder.create("stroke-miterlimit", false);

  /**
   * The {@code stroke-opacity} attribute.
   */
  public static final AttributeName STROKE_OPACITY = WayAttributeNameBuilder.create("stroke-opacity", false);

  /**
   * The {@code stroke-width} attribute.
   */
  public static final AttributeName STROKE_WIDTH = WayAttributeNameBuilder.create("stroke-width", false);

  /**
   * The {@code style} attribute.
   */
  public static final AttributeName STYLE = WayAttributeNameBuilder.create("style", false);

  /**
   * The {@code tabindex} attribute.
   */
  public static final AttributeName TABINDEX = WayAttributeNameBuilder.create("tabindex", false);

  /**
   * The {@code target} attribute.
   */
  public static final AttributeName TARGET = WayAttributeNameBuilder.create("target", false);

  /**
   * The {@code text-anchor} attribute.
   */
  public static final AttributeName TEXT_ANCHOR = WayAttributeNameBuilder.create("text-anchor", false);

  /**
   * The {@code text-decoration} attribute.
   */
  public static final AttributeName TEXT_DECORATION = WayAttributeNameBuilder.create("text-decoration", false);

  /**
   * The {@code text-overflow} attribute.
   */
  public static final AttributeName TEXT_OVERFLOW = WayAttributeNameBuilder.create("text-overflow", false);

  /**
   * The {@code text-rendering} attribute.
   */
  public static final AttributeName TEXT_RENDERING = WayAttributeNameBuilder.create("text-rendering", false);

  /**
   * The {@code title} attribute.
   */
  public static final AttributeName TITLE = WayAttributeNameBuilder.create("title", false);

  /**
   * The {@code transform} attribute.
   */
  public static final AttributeName TRANSFORM = WayAttributeNameBuilder.create("transform", false);

  /**
   * The {@code transform-origin} attribute.
   */
  public static final AttributeName TRANSFORM_ORIGIN = WayAttributeNameBuilder.create("transform-origin", false);

  /**
   * The {@code translate} attribute.
   */
  public static final AttributeName TRANSLATE = WayAttributeNameBuilder.create("translate", false);

  /**
   * The {@code type} attribute.
   */
  public static final AttributeName TYPE = WayAttributeNameBuilder.create("type", false);

  /**
   * The {@code unicode-bidi} attribute.
   */
  public static final AttributeName UNICODE_BIDI = WayAttributeNameBuilder.create("unicode-bidi", false);

  /**
   * The {@code value} attribute.
   */
  public static final AttributeName VALUE = WayAttributeNameBuilder.create("value", false);

  /**
   * The {@code vector-effect} attribute.
   */
  public static final AttributeName VECTOR_EFFECT = WayAttributeNameBuilder.create("vector-effect", false);

  /**
   * The {@code viewBox} attribute.
   */
  public static final AttributeName VIEWBOX = WayAttributeNameBuilder.create("viewBox", false);

  /**
   * The {@code visibility} attribute.
   */
  public static final AttributeName VISIBILITY = WayAttributeNameBuilder.create("visibility", false);

  /**
   * The {@code white-space} attribute.
   */
  public static final AttributeName WHITE_SPACE = WayAttributeNameBuilder.create("white-space", false);

  /**
   * The {@code width} attribute.
   */
  public static final AttributeName WIDTH = WayAttributeNameBuilder.create("width", false);

  /**
   * The {@code word-spacing} attribute.
   */
  public static final AttributeName WORD_SPACING = WayAttributeNameBuilder.create("word-spacing", false);

  /**
   * The {@code wrap} attribute.
   */
  public static final AttributeName WRAP = WayAttributeNameBuilder.create("wrap", false);

  /**
   * The {@code writing-mode} attribute.
   */
  public static final AttributeName WRITING_MODE = WayAttributeNameBuilder.create("writing-mode", false);

  /**
   * The {@code xmlns} attribute.
   */
  public static final AttributeName XMLNS = WayAttributeNameBuilder.create("xmlns", false);

}
