/*
 * Copyright (C) 2015-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.html;

import objectos.html.internal.Ambiguous;
import objectos.html.internal.StandardElementName;
import objectos.html.tmpl.Api;
import objectos.html.tmpl.Api.AbbreviationInstruction;
import objectos.html.tmpl.Api.AnchorInstruction;
import objectos.html.tmpl.Api.ArticleInstruction;
import objectos.html.tmpl.Api.BlockquoteInstruction;
import objectos.html.tmpl.Api.BodyInstruction;
import objectos.html.tmpl.Api.BringAttentionToInstruction;
import objectos.html.tmpl.Api.ButtonInstruction;
import objectos.html.tmpl.Api.ClipPathInstruction;
import objectos.html.tmpl.Api.CodeInstruction;
import objectos.html.tmpl.Api.DefinitionDescriptionInstruction;
import objectos.html.tmpl.Api.DefinitionListInstruction;
import objectos.html.tmpl.Api.DefinitionTermInstruction;
import objectos.html.tmpl.Api.DefsInstruction;
import objectos.html.tmpl.Api.DetailsInstruction;
import objectos.html.tmpl.Api.DivInstruction;
import objectos.html.tmpl.Api.Element;
import objectos.html.tmpl.Api.EmphasisInstruction;
import objectos.html.tmpl.Api.FieldsetInstruction;
import objectos.html.tmpl.Api.FigureInstruction;
import objectos.html.tmpl.Api.FooterInstruction;
import objectos.html.tmpl.Api.FormInstruction;
import objectos.html.tmpl.Api.GInstruction;
import objectos.html.tmpl.Api.HeadInstruction;
import objectos.html.tmpl.Api.HeaderInstruction;
import objectos.html.tmpl.Api.Heading1Instruction;
import objectos.html.tmpl.Api.Heading2Instruction;
import objectos.html.tmpl.Api.Heading3Instruction;
import objectos.html.tmpl.Api.Heading4Instruction;
import objectos.html.tmpl.Api.Heading5Instruction;
import objectos.html.tmpl.Api.Heading6Instruction;
import objectos.html.tmpl.Api.HeadingGroupInstruction;
import objectos.html.tmpl.Api.HorizontalRuleInstruction;
import objectos.html.tmpl.Api.HtmlInstruction;
import objectos.html.tmpl.Api.ImageInstruction;
import objectos.html.tmpl.Api.InputInstruction;
import objectos.html.tmpl.Api.Instruction;
import objectos.html.tmpl.Api.KeyboardInputInstruction;
import objectos.html.tmpl.Api.LabelInstruction;
import objectos.html.tmpl.Api.LegendInstruction;
import objectos.html.tmpl.Api.LineBreakInstruction;
import objectos.html.tmpl.Api.LinkInstruction;
import objectos.html.tmpl.Api.ListItemInstruction;
import objectos.html.tmpl.Api.MainInstruction;
import objectos.html.tmpl.Api.MenuInstruction;
import objectos.html.tmpl.Api.MetaInstruction;
import objectos.html.tmpl.Api.NavInstruction;
import objectos.html.tmpl.Api.OptionGroupInstruction;
import objectos.html.tmpl.Api.OptionInstruction;
import objectos.html.tmpl.Api.OrderedListInstruction;
import objectos.html.tmpl.Api.ParagraphInstruction;
import objectos.html.tmpl.Api.PathInstruction;
import objectos.html.tmpl.Api.PreInstruction;
import objectos.html.tmpl.Api.ProgressInstruction;
import objectos.html.tmpl.Api.SampleOutputInstruction;
import objectos.html.tmpl.Api.ScriptInstruction;
import objectos.html.tmpl.Api.SectionInstruction;
import objectos.html.tmpl.Api.SelectInstruction;
import objectos.html.tmpl.Api.SmallInstruction;
import objectos.html.tmpl.Api.SpanInstruction;
import objectos.html.tmpl.Api.StrongInstruction;
import objectos.html.tmpl.Api.StyleInstruction;
import objectos.html.tmpl.Api.SubscriptInstruction;
import objectos.html.tmpl.Api.SummaryInstruction;
import objectos.html.tmpl.Api.SuperscriptInstruction;
import objectos.html.tmpl.Api.SvgInstruction;
import objectos.html.tmpl.Api.TableBodyInstruction;
import objectos.html.tmpl.Api.TableDataInstruction;
import objectos.html.tmpl.Api.TableHeadInstruction;
import objectos.html.tmpl.Api.TableHeaderInstruction;
import objectos.html.tmpl.Api.TableInstruction;
import objectos.html.tmpl.Api.TableRowInstruction;
import objectos.html.tmpl.Api.TemplateInstruction;
import objectos.html.tmpl.Api.TextAreaInstruction;
import objectos.html.tmpl.Api.TitleInstruction;
import objectos.html.tmpl.Api.UnorderedListInstruction;

/**
 * Provides methods for rendering HTML elements.
 */
// Generated by objectos.selfgen.HtmlSpec. Do not edit!
public sealed abstract class BaseElementDsl extends BaseAttributeDsl permits BaseTemplateDsl {
  BaseElementDsl () {}

  /**
   * Generates the {@code a} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element a(AnchorInstruction... contents) {
    element(StandardElementName.A, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code a} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element a(String text) {
    element(StandardElementName.A, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code abbr} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element abbr(AbbreviationInstruction... contents) {
    element(StandardElementName.ABBR, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code abbr} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element abbr(String text) {
    element(StandardElementName.ABBR, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code article} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element article(ArticleInstruction... contents) {
    element(StandardElementName.ARTICLE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code article} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element article(String text) {
    element(StandardElementName.ARTICLE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code b} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element b(BringAttentionToInstruction... contents) {
    element(StandardElementName.B, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code b} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element b(String text) {
    element(StandardElementName.B, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code blockquote} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element blockquote(BlockquoteInstruction... contents) {
    element(StandardElementName.BLOCKQUOTE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code blockquote} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element blockquote(String text) {
    element(StandardElementName.BLOCKQUOTE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code body} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element body(BodyInstruction... contents) {
    element(StandardElementName.BODY, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code body} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element body(String text) {
    element(StandardElementName.BODY, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code br} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element br(LineBreakInstruction... contents) {
    element(StandardElementName.BR, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code button} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element button(ButtonInstruction... contents) {
    element(StandardElementName.BUTTON, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code button} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element button(String text) {
    element(StandardElementName.BUTTON, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code clipPath} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element clipPath(ClipPathInstruction... contents) {
    element(StandardElementName.CLIPPATH, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code code} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element code(CodeInstruction... contents) {
    element(StandardElementName.CODE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code code} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element code(String text) {
    element(StandardElementName.CODE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dd} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dd(DefinitionDescriptionInstruction... contents) {
    element(StandardElementName.DD, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dd} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dd(String text) {
    element(StandardElementName.DD, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code defs} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element defs(DefsInstruction... contents) {
    element(StandardElementName.DEFS, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code defs} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element defs(String text) {
    element(StandardElementName.DEFS, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code details} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element details(DetailsInstruction... contents) {
    element(StandardElementName.DETAILS, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code details} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element details(String text) {
    element(StandardElementName.DETAILS, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code div} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element div(DivInstruction... contents) {
    element(StandardElementName.DIV, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code div} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element div(String text) {
    element(StandardElementName.DIV, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dl} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dl(DefinitionListInstruction... contents) {
    element(StandardElementName.DL, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dl} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dl(String text) {
    element(StandardElementName.DL, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dt} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dt(DefinitionTermInstruction... contents) {
    element(StandardElementName.DT, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code dt} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element dt(String text) {
    element(StandardElementName.DT, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code em} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element em(EmphasisInstruction... contents) {
    element(StandardElementName.EM, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code em} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element em(String text) {
    element(StandardElementName.EM, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code fieldset} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element fieldset(FieldsetInstruction... contents) {
    element(StandardElementName.FIELDSET, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code fieldset} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element fieldset(String text) {
    element(StandardElementName.FIELDSET, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code figure} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element figure(FigureInstruction... contents) {
    element(StandardElementName.FIGURE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code figure} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element figure(String text) {
    element(StandardElementName.FIGURE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code footer} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element footer(FooterInstruction... contents) {
    element(StandardElementName.FOOTER, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code footer} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element footer(String text) {
    element(StandardElementName.FOOTER, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code form} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element form(FormInstruction... contents) {
    element(StandardElementName.FORM, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code form} attribute or element with the specified text.
   *
   * @param text
   *        the text value of this attribute or element
   *
   * @return an instruction representing this attribute or element.
   */
  protected final Element form(String text) {
    ambiguous(Ambiguous.FORM, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code g} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element g(GInstruction... contents) {
    element(StandardElementName.G, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code g} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element g(String text) {
    element(StandardElementName.G, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h1} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h1(Heading1Instruction... contents) {
    element(StandardElementName.H1, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h1} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h1(String text) {
    element(StandardElementName.H1, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h2} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h2(Heading2Instruction... contents) {
    element(StandardElementName.H2, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h2} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h2(String text) {
    element(StandardElementName.H2, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h3} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h3(Heading3Instruction... contents) {
    element(StandardElementName.H3, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h3} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h3(String text) {
    element(StandardElementName.H3, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h4} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h4(Heading4Instruction... contents) {
    element(StandardElementName.H4, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h4} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h4(String text) {
    element(StandardElementName.H4, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h5} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h5(Heading5Instruction... contents) {
    element(StandardElementName.H5, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h5} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h5(String text) {
    element(StandardElementName.H5, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h6} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h6(Heading6Instruction... contents) {
    element(StandardElementName.H6, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code h6} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element h6(String text) {
    element(StandardElementName.H6, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code head} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element head(HeadInstruction... contents) {
    element(StandardElementName.HEAD, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code head} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element head(String text) {
    element(StandardElementName.HEAD, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code header} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element header(HeaderInstruction... contents) {
    element(StandardElementName.HEADER, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code header} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element header(String text) {
    element(StandardElementName.HEADER, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code hgroup} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element hgroup(HeadingGroupInstruction... contents) {
    element(StandardElementName.HGROUP, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code hgroup} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element hgroup(String text) {
    element(StandardElementName.HGROUP, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code hr} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element hr(HorizontalRuleInstruction... contents) {
    element(StandardElementName.HR, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code html} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element html(HtmlInstruction... contents) {
    element(StandardElementName.HTML, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code html} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element html(String text) {
    element(StandardElementName.HTML, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code img} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element img(ImageInstruction... contents) {
    element(StandardElementName.IMG, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code input} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element input(InputInstruction... contents) {
    element(StandardElementName.INPUT, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code kbd} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element kbd(KeyboardInputInstruction... contents) {
    element(StandardElementName.KBD, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code kbd} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element kbd(String text) {
    element(StandardElementName.KBD, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code label} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element label(LabelInstruction... contents) {
    element(StandardElementName.LABEL, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code label} attribute or element with the specified text.
   *
   * @param text
   *        the text value of this attribute or element
   *
   * @return an instruction representing this attribute or element.
   */
  protected final Element label(String text) {
    ambiguous(Ambiguous.LABEL, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code legend} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element legend(LegendInstruction... contents) {
    element(StandardElementName.LEGEND, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code legend} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element legend(String text) {
    element(StandardElementName.LEGEND, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code li} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element li(ListItemInstruction... contents) {
    element(StandardElementName.LI, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code li} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element li(String text) {
    element(StandardElementName.LI, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code link} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element link(LinkInstruction... contents) {
    element(StandardElementName.LINK, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code main} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element main(MainInstruction... contents) {
    element(StandardElementName.MAIN, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code main} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element main(String text) {
    element(StandardElementName.MAIN, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code menu} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element menu(MenuInstruction... contents) {
    element(StandardElementName.MENU, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code menu} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element menu(String text) {
    element(StandardElementName.MENU, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code meta} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element meta(MetaInstruction... contents) {
    element(StandardElementName.META, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code nav} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element nav(NavInstruction... contents) {
    element(StandardElementName.NAV, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code nav} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element nav(String text) {
    element(StandardElementName.NAV, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code ol} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element ol(OrderedListInstruction... contents) {
    element(StandardElementName.OL, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code ol} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element ol(String text) {
    element(StandardElementName.OL, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code optgroup} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element optgroup(OptionGroupInstruction... contents) {
    element(StandardElementName.OPTGROUP, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code optgroup} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element optgroup(String text) {
    element(StandardElementName.OPTGROUP, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code option} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element option(OptionInstruction... contents) {
    element(StandardElementName.OPTION, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code option} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element option(String text) {
    element(StandardElementName.OPTION, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code p} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element p(ParagraphInstruction... contents) {
    element(StandardElementName.P, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code p} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element p(String text) {
    element(StandardElementName.P, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code path} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element path(PathInstruction... contents) {
    element(StandardElementName.PATH, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code path} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element path(String text) {
    element(StandardElementName.PATH, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code pre} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element pre(PreInstruction... contents) {
    element(StandardElementName.PRE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code pre} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element pre(String text) {
    element(StandardElementName.PRE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code progress} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element progress(ProgressInstruction... contents) {
    element(StandardElementName.PROGRESS, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code progress} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element progress(String text) {
    element(StandardElementName.PROGRESS, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code samp} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element samp(SampleOutputInstruction... contents) {
    element(StandardElementName.SAMP, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code samp} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element samp(String text) {
    element(StandardElementName.SAMP, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code script} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element script(ScriptInstruction... contents) {
    element(StandardElementName.SCRIPT, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code script} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element script(String text) {
    element(StandardElementName.SCRIPT, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code section} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element section(SectionInstruction... contents) {
    element(StandardElementName.SECTION, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code section} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element section(String text) {
    element(StandardElementName.SECTION, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code select} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element select(SelectInstruction... contents) {
    element(StandardElementName.SELECT, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code select} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element select(String text) {
    element(StandardElementName.SELECT, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code small} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element small(SmallInstruction... contents) {
    element(StandardElementName.SMALL, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code small} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element small(String text) {
    element(StandardElementName.SMALL, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code span} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element span(SpanInstruction... contents) {
    element(StandardElementName.SPAN, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code span} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element span(String text) {
    element(StandardElementName.SPAN, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code strong} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element strong(StrongInstruction... contents) {
    element(StandardElementName.STRONG, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code strong} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element strong(String text) {
    element(StandardElementName.STRONG, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code style} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element style(StyleInstruction... contents) {
    element(StandardElementName.STYLE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code style} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element style(String text) {
    element(StandardElementName.STYLE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code sub} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element sub(SubscriptInstruction... contents) {
    element(StandardElementName.SUB, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code sub} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element sub(String text) {
    element(StandardElementName.SUB, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code summary} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element summary(SummaryInstruction... contents) {
    element(StandardElementName.SUMMARY, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code summary} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element summary(String text) {
    element(StandardElementName.SUMMARY, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code sup} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element sup(SuperscriptInstruction... contents) {
    element(StandardElementName.SUP, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code sup} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element sup(String text) {
    element(StandardElementName.SUP, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code svg} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element svg(SvgInstruction... contents) {
    element(StandardElementName.SVG, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code svg} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element svg(String text) {
    element(StandardElementName.SVG, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code table} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element table(TableInstruction... contents) {
    element(StandardElementName.TABLE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code table} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element table(String text) {
    element(StandardElementName.TABLE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code tbody} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element tbody(TableBodyInstruction... contents) {
    element(StandardElementName.TBODY, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code tbody} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element tbody(String text) {
    element(StandardElementName.TBODY, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code td} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element td(TableDataInstruction... contents) {
    element(StandardElementName.TD, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code td} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element td(String text) {
    element(StandardElementName.TD, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code template} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element template(TemplateInstruction... contents) {
    element(StandardElementName.TEMPLATE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code template} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element template(String text) {
    element(StandardElementName.TEMPLATE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code textarea} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element textarea(TextAreaInstruction... contents) {
    element(StandardElementName.TEXTAREA, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code textarea} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element textarea(String text) {
    element(StandardElementName.TEXTAREA, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code th} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element th(TableHeaderInstruction... contents) {
    element(StandardElementName.TH, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code th} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element th(String text) {
    element(StandardElementName.TH, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code thead} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element thead(TableHeadInstruction... contents) {
    element(StandardElementName.THEAD, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code thead} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element thead(String text) {
    element(StandardElementName.THEAD, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code title} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element title(TitleInstruction... contents) {
    element(StandardElementName.TITLE, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code title} attribute or element with the specified text.
   *
   * @param text
   *        the text value of this attribute or element
   *
   * @return an instruction representing this attribute or element.
   */
  protected final Element title(String text) {
    ambiguous(Ambiguous.TITLE, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code tr} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element tr(TableRowInstruction... contents) {
    element(StandardElementName.TR, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code tr} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element tr(String text) {
    element(StandardElementName.TR, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code ul} element with the specified content.
   *
   * @param contents
   *        the attributes and children of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element ul(UnorderedListInstruction... contents) {
    element(StandardElementName.UL, contents);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code ul} element with the specified text.
   *
   * @param text
   *        the text value of this element
   *
   * @return an instruction representing this element.
   */
  protected final Element ul(String text) {
    element(StandardElementName.UL, text);
    return Api.ELEMENT;
  }

  /**
   * Generates the {@code <!DOCTYPE html>} doctype.
   */
  protected final void doctype() {
    api().doctype();
  }

  abstract void ambiguous(Ambiguous name, String text);

  abstract void element(StandardElementName name, String text);

  abstract void element(StandardElementName name, Instruction[] contents);
}
