/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.html;

import objectos.lang.object.Check;

/**
 * Provides methods for rendering HTML attributes.
 */
// Generated by objectos.selfgen.HtmlSpec. Do not edit!
public sealed abstract class BaseAttributes extends Recorder permits BaseElements {
  BaseAttributes() {}

  /**
   * Generates the {@code accesskey} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute accesskey(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ACCESSKEY, value);
  }

  /**
   * Generates the {@code action} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FormValue action(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ACTION, value);
  }

  /**
   * Generates the {@code align} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TableValue align(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ALIGN, value);
  }

  /**
   * Generates the {@code alignment-baseline} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.AlignmentBaselineAttribute alignmentBaseline(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ALIGNMENT_BASELINE, value);
  }

  /**
   * Generates the {@code alt} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ImageValue alt(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ALT, value);
  }

  /**
   * Generates the {@code aria-hidden} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute ariaHidden(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ARIA_HIDDEN, value);
  }

  /**
   * Generates the {@code aria-label} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute ariaLabel(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ARIA_LABEL, value);
  }

  /**
   * Generates the {@code async} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ScriptValue async() {
    return attribute0(AttributeName.ASYNC);
  }

  /**
   * Generates the {@code autocomplete} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.AutocompleteAttribute autocomplete(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.AUTOCOMPLETE, value);
  }

  /**
   * Generates the {@code autofocus} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.InputValue autofocus() {
    return attribute0(AttributeName.AUTOFOCUS);
  }

  /**
   * Generates the {@code baseline-shift} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BaselineShiftAttribute baselineShift(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.BASELINE_SHIFT, value);
  }

  /**
   * Generates the {@code border} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TableValue border(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.BORDER, value);
  }

  /**
   * Generates the {@code cellpadding} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TableValue cellpadding(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CELLPADDING, value);
  }

  /**
   * Generates the {@code cellspacing} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TableValue cellspacing(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CELLSPACING, value);
  }

  /**
   * Generates the {@code charset} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MetaValue charset(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CHARSET, value);
  }

  /**
   * Generates the {@code cite} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BlockquoteValue cite(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CITE, value);
  }

  /**
   * Generates the {@code class} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute className(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CLASS, value);
  }

  /**
   * Generates the {@code clip-rule} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ClipRuleAttribute clipRule(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CLIP_RULE, value);
  }

  /**
   * Generates the {@code color} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ColorAttribute color(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.COLOR, value);
  }

  /**
   * Generates the {@code color-interpolation} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ColorInterpolationAttribute colorInterpolation(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.COLOR_INTERPOLATION, value);
  }

  /**
   * Generates the {@code color-interpolation-filters} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ColorInterpolationFiltersAttribute colorInterpolationFilters(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.COLOR_INTERPOLATION_FILTERS, value);
  }

  /**
   * Generates the {@code cols} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue cols(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.COLS, value);
  }

  /**
   * Generates the {@code content} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MetaValue content(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CONTENT, value);
  }

  /**
   * Generates the {@code contenteditable} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute contenteditable(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CONTENTEDITABLE, value);
  }

  /**
   * Generates the {@code crossorigin} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.CrossoriginAttribute crossorigin(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CROSSORIGIN, value);
  }

  /**
   * Generates the {@code cursor} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.CursorAttribute cursor(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CURSOR, value);
  }

  /**
   * Generates the {@code d} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DAttribute d(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.D, value);
  }

  /**
   * Generates the {@code defer} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ScriptValue defer() {
    return attribute0(AttributeName.DEFER);
  }

  /**
   * Generates the {@code dir} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute dir(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DIR, value);
  }

  /**
   * Generates the {@code direction} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DirectionAttribute direction(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DIRECTION, value);
  }

  /**
   * Generates the {@code dirname} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue dirname(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DIRNAME, value);
  }

  /**
   * Generates the {@code disabled} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DisabledAttribute disabled() {
    return attribute0(AttributeName.DISABLED);
  }

  /**
   * Generates the {@code display} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DisplayAttribute display(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DISPLAY, value);
  }

  /**
   * Generates the {@code dominant-baseline} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DominantBaselineAttribute dominantBaseline(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DOMINANT_BASELINE, value);
  }

  /**
   * Generates the {@code draggable} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute draggable(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.DRAGGABLE, value);
  }

  /**
   * Generates the {@code enctype} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FormValue enctype(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ENCTYPE, value);
  }

  /**
   * Generates the {@code fill} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FillAttribute fill(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FILL, value);
  }

  /**
   * Generates the {@code fill-opacity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FillOpacityAttribute fillOpacity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FILL_OPACITY, value);
  }

  /**
   * Generates the {@code fill-rule} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FillRuleAttribute fillRule(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FILL_RULE, value);
  }

  /**
   * Generates the {@code filter} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FilterAttribute filter(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FILTER, value);
  }

  /**
   * Generates the {@code flood-color} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FloodColorAttribute floodColor(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FLOOD_COLOR, value);
  }

  /**
   * Generates the {@code flood-opacity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FloodOpacityAttribute floodOpacity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FLOOD_OPACITY, value);
  }

  /**
   * Generates the {@code font-family} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontFamilyAttribute fontFamily(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_FAMILY, value);
  }

  /**
   * Generates the {@code font-size} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontSizeAttribute fontSize(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_SIZE, value);
  }

  /**
   * Generates the {@code font-size-adjust} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontSizeAdjustAttribute fontSizeAdjust(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_SIZE_ADJUST, value);
  }

  /**
   * Generates the {@code font-stretch} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontStretchAttribute fontStretch(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_STRETCH, value);
  }

  /**
   * Generates the {@code font-style} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontStyleAttribute fontStyle(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_STYLE, value);
  }

  /**
   * Generates the {@code font-variant} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontVariantAttribute fontVariant(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_VARIANT, value);
  }

  /**
   * Generates the {@code font-weight} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FontWeightAttribute fontWeight(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FONT_WEIGHT, value);
  }

  /**
   * Generates the {@code for} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LabelValue forAttr(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FOR, value);
  }

  /**
   * Generates the {@code for} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LabelValue forElement(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.FOR, value);
  }

  /**
   * Generates the {@code glyph-orientation-horizontal} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlyphOrientationHorizontalAttribute glyphOrientationHorizontal(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.GLYPH_ORIENTATION_HORIZONTAL, value);
  }

  /**
   * Generates the {@code glyph-orientation-vertical} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlyphOrientationVerticalAttribute glyphOrientationVertical(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.GLYPH_ORIENTATION_VERTICAL, value);
  }

  /**
   * Generates the {@code height} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.HeightAttribute height(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.HEIGHT, value);
  }

  /**
   * Generates the {@code hidden} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute hidden() {
    return attribute0(AttributeName.HIDDEN);
  }

  /**
   * Generates the {@code href} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.HrefAttribute href(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.HREF, value);
  }

  /**
   * Generates the {@code http-equiv} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MetaValue httpEquiv(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.HTTP_EQUIV, value);
  }

  /**
   * Generates the {@code id} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute id(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ID, value);
  }

  /**
   * Generates the {@code image-rendering} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ImageRenderingAttribute imageRendering(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.IMAGE_RENDERING, value);
  }

  /**
   * Generates the {@code integrity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ScriptValue integrity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.INTEGRITY, value);
  }

  /**
   * Generates the {@code lang} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute lang(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.LANG, value);
  }

  /**
   * Generates the {@code letter-spacing} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LetterSpacingAttribute letterSpacing(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.LETTER_SPACING, value);
  }

  /**
   * Generates the {@code lighting-color} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LightingColorAttribute lightingColor(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.LIGHTING_COLOR, value);
  }

  /**
   * Generates the {@code marker-end} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MarkerEndAttribute markerEnd(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MARKER_END, value);
  }

  /**
   * Generates the {@code marker-mid} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MarkerMidAttribute markerMid(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MARKER_MID, value);
  }

  /**
   * Generates the {@code marker-start} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MarkerStartAttribute markerStart(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MARKER_START, value);
  }

  /**
   * Generates the {@code mask} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MaskAttribute mask(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MASK, value);
  }

  /**
   * Generates the {@code mask-type} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MaskTypeAttribute maskType(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MASK_TYPE, value);
  }

  /**
   * Generates the {@code maxlength} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue maxlength(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MAXLENGTH, value);
  }

  /**
   * Generates the {@code media} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LinkValue media(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MEDIA, value);
  }

  /**
   * Generates the {@code method} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.FormValue method(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.METHOD, value);
  }

  /**
   * Generates the {@code minlength} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue minlength(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.MINLENGTH, value);
  }

  /**
   * Generates the {@code multiple} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.SelectValue multiple() {
    return attribute0(AttributeName.MULTIPLE);
  }

  /**
   * Generates the {@code name} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.NameAttribute name(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.NAME, value);
  }

  /**
   * Generates the {@code nomodule} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ScriptValue nomodule() {
    return attribute0(AttributeName.NOMODULE);
  }

  /**
   * Generates the {@code onafterprint} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onafterprint(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONAFTERPRINT, value);
  }

  /**
   * Generates the {@code onbeforeprint} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onbeforeprint(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONBEFOREPRINT, value);
  }

  /**
   * Generates the {@code onbeforeunload} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onbeforeunload(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONBEFOREUNLOAD, value);
  }

  /**
   * Generates the {@code onclick} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute onclick(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONCLICK, value);
  }

  /**
   * Generates the {@code onhashchange} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onhashchange(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONHASHCHANGE, value);
  }

  /**
   * Generates the {@code onlanguagechange} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onlanguagechange(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONLANGUAGECHANGE, value);
  }

  /**
   * Generates the {@code onmessage} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onmessage(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONMESSAGE, value);
  }

  /**
   * Generates the {@code onoffline} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onoffline(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONOFFLINE, value);
  }

  /**
   * Generates the {@code ononline} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue ononline(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONONLINE, value);
  }

  /**
   * Generates the {@code onpagehide} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onpagehide(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONPAGEHIDE, value);
  }

  /**
   * Generates the {@code onpageshow} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onpageshow(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONPAGESHOW, value);
  }

  /**
   * Generates the {@code onpopstate} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onpopstate(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONPOPSTATE, value);
  }

  /**
   * Generates the {@code onrejectionhandled} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onrejectionhandled(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONREJECTIONHANDLED, value);
  }

  /**
   * Generates the {@code onstorage} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onstorage(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONSTORAGE, value);
  }

  /**
   * Generates the {@code onsubmit} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute onsubmit(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONSUBMIT, value);
  }

  /**
   * Generates the {@code onunhandledrejection} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onunhandledrejection(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONUNHANDLEDREJECTION, value);
  }

  /**
   * Generates the {@code onunload} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.BodyValue onunload(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ONUNLOAD, value);
  }

  /**
   * Generates the {@code opacity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.OpacityAttribute opacity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.OPACITY, value);
  }

  /**
   * Generates the {@code open} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.DetailsValue open() {
    return attribute0(AttributeName.OPEN);
  }

  /**
   * Generates the {@code overflow} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.OverflowAttribute overflow(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.OVERFLOW, value);
  }

  /**
   * Generates the {@code paint-order} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.PaintOrderAttribute paintOrder(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.PAINT_ORDER, value);
  }

  /**
   * Generates the {@code placeholder} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.PlaceholderAttribute placeholder(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.PLACEHOLDER, value);
  }

  /**
   * Generates the {@code pointer-events} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.PointerEventsAttribute pointerEvents(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.POINTER_EVENTS, value);
  }

  /**
   * Generates the {@code property} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.MetaValue property(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.PROPERTY, value);
  }

  /**
   * Generates the {@code readonly} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ReadonlyAttribute readonly() {
    return attribute0(AttributeName.READONLY);
  }

  /**
   * Generates the {@code referrerpolicy} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ReferrerpolicyAttribute referrerpolicy(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.REFERRERPOLICY, value);
  }

  /**
   * Generates the {@code rel} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LinkValue rel(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.REL, value);
  }

  /**
   * Generates the {@code required} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.RequiredAttribute required() {
    return attribute0(AttributeName.REQUIRED);
  }

  /**
   * Generates the {@code rev} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LinkValue rev(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.REV, value);
  }

  /**
   * Generates the {@code reversed} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.OrderedListValue reversed() {
    return attribute0(AttributeName.REVERSED);
  }

  /**
   * Generates the {@code role} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute role(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ROLE, value);
  }

  /**
   * Generates the {@code rows} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue rows(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.ROWS, value);
  }

  /**
   * Generates the {@code selected} boolean attribute.
   *
   * @return an instruction representing this attribute.
   */
  public final Api.OptionValue selected() {
    return attribute0(AttributeName.SELECTED);
  }

  /**
   * Generates the {@code shape-rendering} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ShapeRenderingAttribute shapeRendering(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SHAPE_RENDERING, value);
  }

  /**
   * Generates the {@code size} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.SelectValue size(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SIZE, value);
  }

  /**
   * Generates the {@code sizes} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.LinkValue sizes(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SIZES, value);
  }

  /**
   * Generates the {@code spellcheck} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute spellcheck(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SPELLCHECK, value);
  }

  /**
   * Generates the {@code src} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.SrcAttribute src(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SRC, value);
  }

  /**
   * Generates the {@code srcset} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ImageValue srcset(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.SRCSET, value);
  }

  /**
   * Generates the {@code start} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.OrderedListValue start(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.START, value);
  }

  /**
   * Generates the {@code stop-color} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StopColorAttribute stopColor(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STOP_COLOR, value);
  }

  /**
   * Generates the {@code stop-opacity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StopOpacityAttribute stopOpacity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STOP_OPACITY, value);
  }

  /**
   * Generates the {@code stroke} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeAttribute stroke(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE, value);
  }

  /**
   * Generates the {@code stroke-dasharray} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeDasharrayAttribute strokeDasharray(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_DASHARRAY, value);
  }

  /**
   * Generates the {@code stroke-dashoffset} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeDashoffsetAttribute strokeDashoffset(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_DASHOFFSET, value);
  }

  /**
   * Generates the {@code stroke-linecap} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeLinecapAttribute strokeLinecap(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_LINECAP, value);
  }

  /**
   * Generates the {@code stroke-linejoin} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeLinejoinAttribute strokeLinejoin(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_LINEJOIN, value);
  }

  /**
   * Generates the {@code stroke-miterlimit} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeMiterlimitAttribute strokeMiterlimit(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_MITERLIMIT, value);
  }

  /**
   * Generates the {@code stroke-opacity} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeOpacityAttribute strokeOpacity(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_OPACITY, value);
  }

  /**
   * Generates the {@code stroke-width} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.StrokeWidthAttribute strokeWidth(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STROKE_WIDTH, value);
  }

  /**
   * Generates the {@code style} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute inlineStyle(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.STYLE, value);
  }

  /**
   * Generates the {@code tabindex} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute tabindex(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TABINDEX, value);
  }

  /**
   * Generates the {@code target} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TargetAttribute target(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TARGET, value);
  }

  /**
   * Generates the {@code text-anchor} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAnchorAttribute textAnchor(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TEXT_ANCHOR, value);
  }

  /**
   * Generates the {@code text-decoration} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextDecorationAttribute textDecoration(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TEXT_DECORATION, value);
  }

  /**
   * Generates the {@code text-overflow} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextOverflowAttribute textOverflow(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TEXT_OVERFLOW, value);
  }

  /**
   * Generates the {@code text-rendering} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextRenderingAttribute textRendering(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TEXT_RENDERING, value);
  }

  /**
   * Generates the {@code transform} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TransformAttribute transform(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TRANSFORM, value);
  }

  /**
   * Generates the {@code transform-origin} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TransformOriginAttribute transformOrigin(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TRANSFORM_ORIGIN, value);
  }

  /**
   * Generates the {@code translate} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.GlobalAttribute translate(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TRANSLATE, value);
  }

  /**
   * Generates the {@code type} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TypeAttribute type(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.TYPE, value);
  }

  /**
   * Generates the {@code unicode-bidi} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.UnicodeBidiAttribute unicodeBidi(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.UNICODE_BIDI, value);
  }

  /**
   * Generates the {@code value} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ValueAttribute value(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.VALUE, value);
  }

  /**
   * Generates the {@code vector-effect} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.VectorEffectAttribute vectorEffect(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.VECTOR_EFFECT, value);
  }

  /**
   * Generates the {@code viewBox} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.SvgValue viewBox(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.VIEWBOX, value);
  }

  /**
   * Generates the {@code visibility} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.VisibilityAttribute visibility(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.VISIBILITY, value);
  }

  /**
   * Generates the {@code white-space} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.WhiteSpaceAttribute whiteSpace(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.WHITE_SPACE, value);
  }

  /**
   * Generates the {@code width} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.WidthAttribute width(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.WIDTH, value);
  }

  /**
   * Generates the {@code word-spacing} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.WordSpacingAttribute wordSpacing(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.WORD_SPACING, value);
  }

  /**
   * Generates the {@code wrap} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.TextAreaValue wrap(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.WRAP, value);
  }

  /**
   * Generates the {@code writing-mode} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.WritingModeAttribute writingMode(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.WRITING_MODE, value);
  }

  /**
   * Generates the {@code xmlns} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.SvgValue xmlns(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.XMLNS, value);
  }

  /**
   * Generates the {@code clip-path} attribute with the specified value.
   *
   * @param value
   *        the value of the attribute
   *
   * @return an instruction representing this attribute.
   */
  public final Api.ClipPathAttribute clipPath(String value) {
    Check.notNull(value, "value == null");
    return attribute0(AttributeName.CLIP_PATH, value);
  }
}
