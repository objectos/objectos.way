/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.way;

// Generated by objectos.selfgen.HtmlSpec. Do not edit!
abstract class HtmlAttributeNameGenerated {

  HtmlAttributeNameGenerated() {}

  /**
   * The {@code accesskey} attribute.
   */
  public static final Html.AttributeName ACCESSKEY = HtmlAttributeNameBuilder.create("accesskey", false);

  /**
   * The {@code action} attribute.
   */
  public static final Html.AttributeName ACTION = HtmlAttributeNameBuilder.create("action", false);

  /**
   * The {@code align} attribute.
   */
  public static final Html.AttributeName ALIGN = HtmlAttributeNameBuilder.create("align", false);

  /**
   * The {@code alignment-baseline} attribute.
   */
  public static final Html.AttributeName ALIGNMENT_BASELINE = HtmlAttributeNameBuilder.create("alignment-baseline", false);

  /**
   * The {@code alt} attribute.
   */
  public static final Html.AttributeName ALT = HtmlAttributeNameBuilder.create("alt", false);

  /**
   * The {@code aria-hidden} attribute.
   */
  public static final Html.AttributeName ARIA_HIDDEN = HtmlAttributeNameBuilder.create("aria-hidden", false);

  /**
   * The {@code aria-label} attribute.
   */
  public static final Html.AttributeName ARIA_LABEL = HtmlAttributeNameBuilder.create("aria-label", false);

  /**
   * The {@code async} attribute.
   */
  public static final Html.AttributeName ASYNC = HtmlAttributeNameBuilder.create("async", true);

  /**
   * The {@code autocomplete} attribute.
   */
  public static final Html.AttributeName AUTOCOMPLETE = HtmlAttributeNameBuilder.create("autocomplete", false);

  /**
   * The {@code autofocus} attribute.
   */
  public static final Html.AttributeName AUTOFOCUS = HtmlAttributeNameBuilder.create("autofocus", true);

  /**
   * The {@code baseline-shift} attribute.
   */
  public static final Html.AttributeName BASELINE_SHIFT = HtmlAttributeNameBuilder.create("baseline-shift", false);

  /**
   * The {@code border} attribute.
   */
  public static final Html.AttributeName BORDER = HtmlAttributeNameBuilder.create("border", false);

  /**
   * The {@code cellpadding} attribute.
   */
  public static final Html.AttributeName CELLPADDING = HtmlAttributeNameBuilder.create("cellpadding", false);

  /**
   * The {@code cellspacing} attribute.
   */
  public static final Html.AttributeName CELLSPACING = HtmlAttributeNameBuilder.create("cellspacing", false);

  /**
   * The {@code charset} attribute.
   */
  public static final Html.AttributeName CHARSET = HtmlAttributeNameBuilder.create("charset", false);

  /**
   * The {@code cite} attribute.
   */
  public static final Html.AttributeName CITE = HtmlAttributeNameBuilder.create("cite", false);

  /**
   * The {@code class} attribute.
   */
  public static final Html.AttributeName CLASS = HtmlAttributeNameBuilder.create("class", false);

  /**
   * The {@code clip-path} attribute.
   */
  public static final Html.AttributeName CLIP_PATH = HtmlAttributeNameBuilder.create("clip-path", false);

  /**
   * The {@code clip-rule} attribute.
   */
  public static final Html.AttributeName CLIP_RULE = HtmlAttributeNameBuilder.create("clip-rule", false);

  /**
   * The {@code color} attribute.
   */
  public static final Html.AttributeName COLOR = HtmlAttributeNameBuilder.create("color", false);

  /**
   * The {@code color-interpolation} attribute.
   */
  public static final Html.AttributeName COLOR_INTERPOLATION = HtmlAttributeNameBuilder.create("color-interpolation", false);

  /**
   * The {@code color-interpolation-filters} attribute.
   */
  public static final Html.AttributeName COLOR_INTERPOLATION_FILTERS = HtmlAttributeNameBuilder.create("color-interpolation-filters", false);

  /**
   * The {@code cols} attribute.
   */
  public static final Html.AttributeName COLS = HtmlAttributeNameBuilder.create("cols", false);

  /**
   * The {@code content} attribute.
   */
  public static final Html.AttributeName CONTENT = HtmlAttributeNameBuilder.create("content", false);

  /**
   * The {@code contenteditable} attribute.
   */
  public static final Html.AttributeName CONTENTEDITABLE = HtmlAttributeNameBuilder.create("contenteditable", false);

  /**
   * The {@code crossorigin} attribute.
   */
  public static final Html.AttributeName CROSSORIGIN = HtmlAttributeNameBuilder.create("crossorigin", false);

  /**
   * The {@code cursor} attribute.
   */
  public static final Html.AttributeName CURSOR = HtmlAttributeNameBuilder.create("cursor", false);

  /**
   * The {@code d} attribute.
   */
  public static final Html.AttributeName D = HtmlAttributeNameBuilder.create("d", false);

  /**
   * The {@code defer} attribute.
   */
  public static final Html.AttributeName DEFER = HtmlAttributeNameBuilder.create("defer", true);

  /**
   * The {@code dir} attribute.
   */
  public static final Html.AttributeName DIR = HtmlAttributeNameBuilder.create("dir", false);

  /**
   * The {@code direction} attribute.
   */
  public static final Html.AttributeName DIRECTION = HtmlAttributeNameBuilder.create("direction", false);

  /**
   * The {@code dirname} attribute.
   */
  public static final Html.AttributeName DIRNAME = HtmlAttributeNameBuilder.create("dirname", false);

  /**
   * The {@code disabled} attribute.
   */
  public static final Html.AttributeName DISABLED = HtmlAttributeNameBuilder.create("disabled", true);

  /**
   * The {@code display} attribute.
   */
  public static final Html.AttributeName DISPLAY = HtmlAttributeNameBuilder.create("display", false);

  /**
   * The {@code dominant-baseline} attribute.
   */
  public static final Html.AttributeName DOMINANT_BASELINE = HtmlAttributeNameBuilder.create("dominant-baseline", false);

  /**
   * The {@code draggable} attribute.
   */
  public static final Html.AttributeName DRAGGABLE = HtmlAttributeNameBuilder.create("draggable", false);

  /**
   * The {@code enctype} attribute.
   */
  public static final Html.AttributeName ENCTYPE = HtmlAttributeNameBuilder.create("enctype", false);

  /**
   * The {@code fill} attribute.
   */
  public static final Html.AttributeName FILL = HtmlAttributeNameBuilder.create("fill", false);

  /**
   * The {@code fill-opacity} attribute.
   */
  public static final Html.AttributeName FILL_OPACITY = HtmlAttributeNameBuilder.create("fill-opacity", false);

  /**
   * The {@code fill-rule} attribute.
   */
  public static final Html.AttributeName FILL_RULE = HtmlAttributeNameBuilder.create("fill-rule", false);

  /**
   * The {@code filter} attribute.
   */
  public static final Html.AttributeName FILTER = HtmlAttributeNameBuilder.create("filter", false);

  /**
   * The {@code flood-color} attribute.
   */
  public static final Html.AttributeName FLOOD_COLOR = HtmlAttributeNameBuilder.create("flood-color", false);

  /**
   * The {@code flood-opacity} attribute.
   */
  public static final Html.AttributeName FLOOD_OPACITY = HtmlAttributeNameBuilder.create("flood-opacity", false);

  /**
   * The {@code font-family} attribute.
   */
  public static final Html.AttributeName FONT_FAMILY = HtmlAttributeNameBuilder.create("font-family", false);

  /**
   * The {@code font-size} attribute.
   */
  public static final Html.AttributeName FONT_SIZE = HtmlAttributeNameBuilder.create("font-size", false);

  /**
   * The {@code font-size-adjust} attribute.
   */
  public static final Html.AttributeName FONT_SIZE_ADJUST = HtmlAttributeNameBuilder.create("font-size-adjust", false);

  /**
   * The {@code font-stretch} attribute.
   */
  public static final Html.AttributeName FONT_STRETCH = HtmlAttributeNameBuilder.create("font-stretch", false);

  /**
   * The {@code font-style} attribute.
   */
  public static final Html.AttributeName FONT_STYLE = HtmlAttributeNameBuilder.create("font-style", false);

  /**
   * The {@code font-variant} attribute.
   */
  public static final Html.AttributeName FONT_VARIANT = HtmlAttributeNameBuilder.create("font-variant", false);

  /**
   * The {@code font-weight} attribute.
   */
  public static final Html.AttributeName FONT_WEIGHT = HtmlAttributeNameBuilder.create("font-weight", false);

  /**
   * The {@code for} attribute.
   */
  public static final Html.AttributeName FOR = HtmlAttributeNameBuilder.create("for", false);

  /**
   * The {@code form} attribute.
   */
  public static final Html.AttributeName FORM = HtmlAttributeNameBuilder.create("form", false);

  /**
   * The {@code glyph-orientation-horizontal} attribute.
   */
  public static final Html.AttributeName GLYPH_ORIENTATION_HORIZONTAL = HtmlAttributeNameBuilder.create("glyph-orientation-horizontal", false);

  /**
   * The {@code glyph-orientation-vertical} attribute.
   */
  public static final Html.AttributeName GLYPH_ORIENTATION_VERTICAL = HtmlAttributeNameBuilder.create("glyph-orientation-vertical", false);

  /**
   * The {@code height} attribute.
   */
  public static final Html.AttributeName HEIGHT = HtmlAttributeNameBuilder.create("height", false);

  /**
   * The {@code hidden} attribute.
   */
  public static final Html.AttributeName HIDDEN = HtmlAttributeNameBuilder.create("hidden", true);

  /**
   * The {@code href} attribute.
   */
  public static final Html.AttributeName HREF = HtmlAttributeNameBuilder.create("href", false);

  /**
   * The {@code http-equiv} attribute.
   */
  public static final Html.AttributeName HTTP_EQUIV = HtmlAttributeNameBuilder.create("http-equiv", false);

  /**
   * The {@code id} attribute.
   */
  public static final Html.AttributeName ID = HtmlAttributeNameBuilder.create("id", false);

  /**
   * The {@code image-rendering} attribute.
   */
  public static final Html.AttributeName IMAGE_RENDERING = HtmlAttributeNameBuilder.create("image-rendering", false);

  /**
   * The {@code integrity} attribute.
   */
  public static final Html.AttributeName INTEGRITY = HtmlAttributeNameBuilder.create("integrity", false);

  /**
   * The {@code label} attribute.
   */
  public static final Html.AttributeName LABEL = HtmlAttributeNameBuilder.create("label", false);

  /**
   * The {@code lang} attribute.
   */
  public static final Html.AttributeName LANG = HtmlAttributeNameBuilder.create("lang", false);

  /**
   * The {@code letter-spacing} attribute.
   */
  public static final Html.AttributeName LETTER_SPACING = HtmlAttributeNameBuilder.create("letter-spacing", false);

  /**
   * The {@code lighting-color} attribute.
   */
  public static final Html.AttributeName LIGHTING_COLOR = HtmlAttributeNameBuilder.create("lighting-color", false);

  /**
   * The {@code marker-end} attribute.
   */
  public static final Html.AttributeName MARKER_END = HtmlAttributeNameBuilder.create("marker-end", false);

  /**
   * The {@code marker-mid} attribute.
   */
  public static final Html.AttributeName MARKER_MID = HtmlAttributeNameBuilder.create("marker-mid", false);

  /**
   * The {@code marker-start} attribute.
   */
  public static final Html.AttributeName MARKER_START = HtmlAttributeNameBuilder.create("marker-start", false);

  /**
   * The {@code mask} attribute.
   */
  public static final Html.AttributeName MASK = HtmlAttributeNameBuilder.create("mask", false);

  /**
   * The {@code mask-type} attribute.
   */
  public static final Html.AttributeName MASK_TYPE = HtmlAttributeNameBuilder.create("mask-type", false);

  /**
   * The {@code maxlength} attribute.
   */
  public static final Html.AttributeName MAXLENGTH = HtmlAttributeNameBuilder.create("maxlength", false);

  /**
   * The {@code media} attribute.
   */
  public static final Html.AttributeName MEDIA = HtmlAttributeNameBuilder.create("media", false);

  /**
   * The {@code method} attribute.
   */
  public static final Html.AttributeName METHOD = HtmlAttributeNameBuilder.create("method", false);

  /**
   * The {@code minlength} attribute.
   */
  public static final Html.AttributeName MINLENGTH = HtmlAttributeNameBuilder.create("minlength", false);

  /**
   * The {@code multiple} attribute.
   */
  public static final Html.AttributeName MULTIPLE = HtmlAttributeNameBuilder.create("multiple", true);

  /**
   * The {@code name} attribute.
   */
  public static final Html.AttributeName NAME = HtmlAttributeNameBuilder.create("name", false);

  /**
   * The {@code nomodule} attribute.
   */
  public static final Html.AttributeName NOMODULE = HtmlAttributeNameBuilder.create("nomodule", true);

  /**
   * The {@code onafterprint} attribute.
   */
  public static final Html.AttributeName ONAFTERPRINT = HtmlAttributeNameBuilder.create("onafterprint", false);

  /**
   * The {@code onbeforeprint} attribute.
   */
  public static final Html.AttributeName ONBEFOREPRINT = HtmlAttributeNameBuilder.create("onbeforeprint", false);

  /**
   * The {@code onbeforeunload} attribute.
   */
  public static final Html.AttributeName ONBEFOREUNLOAD = HtmlAttributeNameBuilder.create("onbeforeunload", false);

  /**
   * The {@code onclick} attribute.
   */
  public static final Html.AttributeName ONCLICK = HtmlAttributeNameBuilder.create("onclick", false);

  /**
   * The {@code onhashchange} attribute.
   */
  public static final Html.AttributeName ONHASHCHANGE = HtmlAttributeNameBuilder.create("onhashchange", false);

  /**
   * The {@code onlanguagechange} attribute.
   */
  public static final Html.AttributeName ONLANGUAGECHANGE = HtmlAttributeNameBuilder.create("onlanguagechange", false);

  /**
   * The {@code onmessage} attribute.
   */
  public static final Html.AttributeName ONMESSAGE = HtmlAttributeNameBuilder.create("onmessage", false);

  /**
   * The {@code onoffline} attribute.
   */
  public static final Html.AttributeName ONOFFLINE = HtmlAttributeNameBuilder.create("onoffline", false);

  /**
   * The {@code ononline} attribute.
   */
  public static final Html.AttributeName ONONLINE = HtmlAttributeNameBuilder.create("ononline", false);

  /**
   * The {@code onpagehide} attribute.
   */
  public static final Html.AttributeName ONPAGEHIDE = HtmlAttributeNameBuilder.create("onpagehide", false);

  /**
   * The {@code onpageshow} attribute.
   */
  public static final Html.AttributeName ONPAGESHOW = HtmlAttributeNameBuilder.create("onpageshow", false);

  /**
   * The {@code onpopstate} attribute.
   */
  public static final Html.AttributeName ONPOPSTATE = HtmlAttributeNameBuilder.create("onpopstate", false);

  /**
   * The {@code onrejectionhandled} attribute.
   */
  public static final Html.AttributeName ONREJECTIONHANDLED = HtmlAttributeNameBuilder.create("onrejectionhandled", false);

  /**
   * The {@code onstorage} attribute.
   */
  public static final Html.AttributeName ONSTORAGE = HtmlAttributeNameBuilder.create("onstorage", false);

  /**
   * The {@code onsubmit} attribute.
   */
  public static final Html.AttributeName ONSUBMIT = HtmlAttributeNameBuilder.create("onsubmit", false);

  /**
   * The {@code onunhandledrejection} attribute.
   */
  public static final Html.AttributeName ONUNHANDLEDREJECTION = HtmlAttributeNameBuilder.create("onunhandledrejection", false);

  /**
   * The {@code onunload} attribute.
   */
  public static final Html.AttributeName ONUNLOAD = HtmlAttributeNameBuilder.create("onunload", false);

  /**
   * The {@code opacity} attribute.
   */
  public static final Html.AttributeName OPACITY = HtmlAttributeNameBuilder.create("opacity", false);

  /**
   * The {@code open} attribute.
   */
  public static final Html.AttributeName OPEN = HtmlAttributeNameBuilder.create("open", true);

  /**
   * The {@code overflow} attribute.
   */
  public static final Html.AttributeName OVERFLOW = HtmlAttributeNameBuilder.create("overflow", false);

  /**
   * The {@code paint-order} attribute.
   */
  public static final Html.AttributeName PAINT_ORDER = HtmlAttributeNameBuilder.create("paint-order", false);

  /**
   * The {@code placeholder} attribute.
   */
  public static final Html.AttributeName PLACEHOLDER = HtmlAttributeNameBuilder.create("placeholder", false);

  /**
   * The {@code pointer-events} attribute.
   */
  public static final Html.AttributeName POINTER_EVENTS = HtmlAttributeNameBuilder.create("pointer-events", false);

  /**
   * The {@code property} attribute.
   */
  public static final Html.AttributeName PROPERTY = HtmlAttributeNameBuilder.create("property", false);

  /**
   * The {@code readonly} attribute.
   */
  public static final Html.AttributeName READONLY = HtmlAttributeNameBuilder.create("readonly", true);

  /**
   * The {@code referrerpolicy} attribute.
   */
  public static final Html.AttributeName REFERRERPOLICY = HtmlAttributeNameBuilder.create("referrerpolicy", false);

  /**
   * The {@code rel} attribute.
   */
  public static final Html.AttributeName REL = HtmlAttributeNameBuilder.create("rel", false);

  /**
   * The {@code required} attribute.
   */
  public static final Html.AttributeName REQUIRED = HtmlAttributeNameBuilder.create("required", true);

  /**
   * The {@code rev} attribute.
   */
  public static final Html.AttributeName REV = HtmlAttributeNameBuilder.create("rev", false);

  /**
   * The {@code reversed} attribute.
   */
  public static final Html.AttributeName REVERSED = HtmlAttributeNameBuilder.create("reversed", true);

  /**
   * The {@code role} attribute.
   */
  public static final Html.AttributeName ROLE = HtmlAttributeNameBuilder.create("role", false);

  /**
   * The {@code rows} attribute.
   */
  public static final Html.AttributeName ROWS = HtmlAttributeNameBuilder.create("rows", false);

  /**
   * The {@code selected} attribute.
   */
  public static final Html.AttributeName SELECTED = HtmlAttributeNameBuilder.create("selected", true);

  /**
   * The {@code shape-rendering} attribute.
   */
  public static final Html.AttributeName SHAPE_RENDERING = HtmlAttributeNameBuilder.create("shape-rendering", false);

  /**
   * The {@code size} attribute.
   */
  public static final Html.AttributeName SIZE = HtmlAttributeNameBuilder.create("size", false);

  /**
   * The {@code sizes} attribute.
   */
  public static final Html.AttributeName SIZES = HtmlAttributeNameBuilder.create("sizes", false);

  /**
   * The {@code spellcheck} attribute.
   */
  public static final Html.AttributeName SPELLCHECK = HtmlAttributeNameBuilder.create("spellcheck", false);

  /**
   * The {@code src} attribute.
   */
  public static final Html.AttributeName SRC = HtmlAttributeNameBuilder.create("src", false);

  /**
   * The {@code srcset} attribute.
   */
  public static final Html.AttributeName SRCSET = HtmlAttributeNameBuilder.create("srcset", false);

  /**
   * The {@code start} attribute.
   */
  public static final Html.AttributeName START = HtmlAttributeNameBuilder.create("start", false);

  /**
   * The {@code stop-color} attribute.
   */
  public static final Html.AttributeName STOP_COLOR = HtmlAttributeNameBuilder.create("stop-color", false);

  /**
   * The {@code stop-opacity} attribute.
   */
  public static final Html.AttributeName STOP_OPACITY = HtmlAttributeNameBuilder.create("stop-opacity", false);

  /**
   * The {@code stroke} attribute.
   */
  public static final Html.AttributeName STROKE = HtmlAttributeNameBuilder.create("stroke", false);

  /**
   * The {@code stroke-dasharray} attribute.
   */
  public static final Html.AttributeName STROKE_DASHARRAY = HtmlAttributeNameBuilder.create("stroke-dasharray", false);

  /**
   * The {@code stroke-dashoffset} attribute.
   */
  public static final Html.AttributeName STROKE_DASHOFFSET = HtmlAttributeNameBuilder.create("stroke-dashoffset", false);

  /**
   * The {@code stroke-linecap} attribute.
   */
  public static final Html.AttributeName STROKE_LINECAP = HtmlAttributeNameBuilder.create("stroke-linecap", false);

  /**
   * The {@code stroke-linejoin} attribute.
   */
  public static final Html.AttributeName STROKE_LINEJOIN = HtmlAttributeNameBuilder.create("stroke-linejoin", false);

  /**
   * The {@code stroke-miterlimit} attribute.
   */
  public static final Html.AttributeName STROKE_MITERLIMIT = HtmlAttributeNameBuilder.create("stroke-miterlimit", false);

  /**
   * The {@code stroke-opacity} attribute.
   */
  public static final Html.AttributeName STROKE_OPACITY = HtmlAttributeNameBuilder.create("stroke-opacity", false);

  /**
   * The {@code stroke-width} attribute.
   */
  public static final Html.AttributeName STROKE_WIDTH = HtmlAttributeNameBuilder.create("stroke-width", false);

  /**
   * The {@code style} attribute.
   */
  public static final Html.AttributeName STYLE = HtmlAttributeNameBuilder.create("style", false);

  /**
   * The {@code tabindex} attribute.
   */
  public static final Html.AttributeName TABINDEX = HtmlAttributeNameBuilder.create("tabindex", false);

  /**
   * The {@code target} attribute.
   */
  public static final Html.AttributeName TARGET = HtmlAttributeNameBuilder.create("target", false);

  /**
   * The {@code text-anchor} attribute.
   */
  public static final Html.AttributeName TEXT_ANCHOR = HtmlAttributeNameBuilder.create("text-anchor", false);

  /**
   * The {@code text-decoration} attribute.
   */
  public static final Html.AttributeName TEXT_DECORATION = HtmlAttributeNameBuilder.create("text-decoration", false);

  /**
   * The {@code text-overflow} attribute.
   */
  public static final Html.AttributeName TEXT_OVERFLOW = HtmlAttributeNameBuilder.create("text-overflow", false);

  /**
   * The {@code text-rendering} attribute.
   */
  public static final Html.AttributeName TEXT_RENDERING = HtmlAttributeNameBuilder.create("text-rendering", false);

  /**
   * The {@code title} attribute.
   */
  public static final Html.AttributeName TITLE = HtmlAttributeNameBuilder.create("title", false);

  /**
   * The {@code transform} attribute.
   */
  public static final Html.AttributeName TRANSFORM = HtmlAttributeNameBuilder.create("transform", false);

  /**
   * The {@code transform-origin} attribute.
   */
  public static final Html.AttributeName TRANSFORM_ORIGIN = HtmlAttributeNameBuilder.create("transform-origin", false);

  /**
   * The {@code translate} attribute.
   */
  public static final Html.AttributeName TRANSLATE = HtmlAttributeNameBuilder.create("translate", false);

  /**
   * The {@code type} attribute.
   */
  public static final Html.AttributeName TYPE = HtmlAttributeNameBuilder.create("type", false);

  /**
   * The {@code unicode-bidi} attribute.
   */
  public static final Html.AttributeName UNICODE_BIDI = HtmlAttributeNameBuilder.create("unicode-bidi", false);

  /**
   * The {@code value} attribute.
   */
  public static final Html.AttributeName VALUE = HtmlAttributeNameBuilder.create("value", false);

  /**
   * The {@code vector-effect} attribute.
   */
  public static final Html.AttributeName VECTOR_EFFECT = HtmlAttributeNameBuilder.create("vector-effect", false);

  /**
   * The {@code viewBox} attribute.
   */
  public static final Html.AttributeName VIEWBOX = HtmlAttributeNameBuilder.create("viewBox", false);

  /**
   * The {@code visibility} attribute.
   */
  public static final Html.AttributeName VISIBILITY = HtmlAttributeNameBuilder.create("visibility", false);

  /**
   * The {@code white-space} attribute.
   */
  public static final Html.AttributeName WHITE_SPACE = HtmlAttributeNameBuilder.create("white-space", false);

  /**
   * The {@code width} attribute.
   */
  public static final Html.AttributeName WIDTH = HtmlAttributeNameBuilder.create("width", false);

  /**
   * The {@code word-spacing} attribute.
   */
  public static final Html.AttributeName WORD_SPACING = HtmlAttributeNameBuilder.create("word-spacing", false);

  /**
   * The {@code wrap} attribute.
   */
  public static final Html.AttributeName WRAP = HtmlAttributeNameBuilder.create("wrap", false);

  /**
   * The {@code writing-mode} attribute.
   */
  public static final Html.AttributeName WRITING_MODE = HtmlAttributeNameBuilder.create("writing-mode", false);

  /**
   * The {@code xmlns} attribute.
   */
  public static final Html.AttributeName XMLNS = HtmlAttributeNameBuilder.create("xmlns", false);

}
