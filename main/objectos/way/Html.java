/*
 * Copyright (C) 2015-2024 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.way;

/**
 * The Objectos HTML main class.
 */
public final class Html {

  // types

  /**
   * The name of an HTML attribute.
   */
  public sealed interface AttributeName permits HtmlAttributeName {

    /**
     * Index of this attribute.
     *
     * @return index of this attribute.
     */
    int index();

    /**
     * Name of the attribute.
     *
     * @return name of the attribute
     */
    String name();

    /**
     * Indicates if this is the name of a boolean atttribute.
     *
     * @return {@code true} if this is the name of a boolean atttribute and
     *         {@code false} otherwise
     */
    boolean booleanAttribute();

    /**
     * Indicates if the value of this attribute must be formatted inside single
     * quotes.
     *
     * @return {@code true} if the value of this attribute must be formatted
     *         inside single quotes.
     */
    boolean singleQuoted();

  }

  /**
   * Compiles an HTML template into a materialized HTML document.
   */
  public non-sealed interface Compiler extends CompilerAttributes {

  }

  private Html() {}

  // The code below was generated by objectos.selfgen.HtmlSpec. Do not edit!

  /**
   * Represents an instruction that generates part of the output of an HTML
   * template.
   *
   * <p>
   * Unless noted references to a particular instruction MUST NOT be reused.
   */
  public sealed interface Instruction {}

  /**
   * An attribute instruction in an HTML template.
   */
  public sealed interface AttributeInstruction extends Instruction {}

  private static final class HtmlAttributeInstruction implements AttributeInstruction {}

  static final AttributeInstruction ATTRIBUTE = new HtmlAttributeInstruction();

  /**
   * Provides methods the HTML attributes template methods.
   */
  public static abstract class TemplateAttributes {

    TemplateAttributes() {}

    /**
     * Generates the {@code accesskey} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction accesskey(String value) {
      return $compiler().accesskey(value);
    }

    /**
     * Generates the {@code action} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction action(String value) {
      return $compiler().action(value);
    }

    /**
     * Generates the {@code align} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction align(String value) {
      return $compiler().align(value);
    }

    /**
     * Generates the {@code alignment-baseline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction alignmentBaseline(String value) {
      return $compiler().alignmentBaseline(value);
    }

    /**
     * Generates the {@code alt} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction alt(String value) {
      return $compiler().alt(value);
    }

    /**
     * Generates the {@code aria-hidden} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction ariaHidden(String value) {
      return $compiler().ariaHidden(value);
    }

    /**
     * Generates the {@code aria-label} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction ariaLabel(String value) {
      return $compiler().ariaLabel(value);
    }

    /**
     * Generates the {@code async} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction async() {
      return $compiler().async();
    }

    /**
     * Generates the {@code autocomplete} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction autocomplete(String value) {
      return $compiler().autocomplete(value);
    }

    /**
     * Generates the {@code autofocus} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction autofocus() {
      return $compiler().autofocus();
    }

    /**
     * Generates the {@code baseline-shift} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction baselineShift(String value) {
      return $compiler().baselineShift(value);
    }

    /**
     * Generates the {@code border} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction border(String value) {
      return $compiler().border(value);
    }

    /**
     * Generates the {@code cellpadding} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction cellpadding(String value) {
      return $compiler().cellpadding(value);
    }

    /**
     * Generates the {@code cellspacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction cellspacing(String value) {
      return $compiler().cellspacing(value);
    }

    /**
     * Generates the {@code charset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction charset(String value) {
      return $compiler().charset(value);
    }

    /**
     * Generates the {@code cite} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction cite(String value) {
      return $compiler().cite(value);
    }

    /**
     * Generates the {@code class} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction className(String value) {
      return $compiler().className(value);
    }

    /**
     * Generates the {@code clip-rule} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction clipRule(String value) {
      return $compiler().clipRule(value);
    }

    /**
     * Generates the {@code color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction color(String value) {
      return $compiler().color(value);
    }

    /**
     * Generates the {@code color-interpolation} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction colorInterpolation(String value) {
      return $compiler().colorInterpolation(value);
    }

    /**
     * Generates the {@code color-interpolation-filters} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction colorInterpolationFilters(String value) {
      return $compiler().colorInterpolationFilters(value);
    }

    /**
     * Generates the {@code cols} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction cols(String value) {
      return $compiler().cols(value);
    }

    /**
     * Generates the {@code content} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction content(String value) {
      return $compiler().content(value);
    }

    /**
     * Generates the {@code contenteditable} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction contenteditable(String value) {
      return $compiler().contenteditable(value);
    }

    /**
     * Generates the {@code crossorigin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction crossorigin(String value) {
      return $compiler().crossorigin(value);
    }

    /**
     * Generates the {@code cursor} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction cursor(String value) {
      return $compiler().cursor(value);
    }

    /**
     * Generates the {@code d} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction d(String value) {
      return $compiler().d(value);
    }

    /**
     * Generates the {@code defer} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction defer() {
      return $compiler().defer();
    }

    /**
     * Generates the {@code dir} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction dir(String value) {
      return $compiler().dir(value);
    }

    /**
     * Generates the {@code direction} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction direction(String value) {
      return $compiler().direction(value);
    }

    /**
     * Generates the {@code dirname} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction dirname(String value) {
      return $compiler().dirname(value);
    }

    /**
     * Generates the {@code disabled} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction disabled() {
      return $compiler().disabled();
    }

    /**
     * Generates the {@code display} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction display(String value) {
      return $compiler().display(value);
    }

    /**
     * Generates the {@code dominant-baseline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction dominantBaseline(String value) {
      return $compiler().dominantBaseline(value);
    }

    /**
     * Generates the {@code draggable} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction draggable(String value) {
      return $compiler().draggable(value);
    }

    /**
     * Generates the {@code enctype} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction enctype(String value) {
      return $compiler().enctype(value);
    }

    /**
     * Generates the {@code fill} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fill(String value) {
      return $compiler().fill(value);
    }

    /**
     * Generates the {@code fill-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fillOpacity(String value) {
      return $compiler().fillOpacity(value);
    }

    /**
     * Generates the {@code fill-rule} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fillRule(String value) {
      return $compiler().fillRule(value);
    }

    /**
     * Generates the {@code filter} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction filter(String value) {
      return $compiler().filter(value);
    }

    /**
     * Generates the {@code flood-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction floodColor(String value) {
      return $compiler().floodColor(value);
    }

    /**
     * Generates the {@code flood-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction floodOpacity(String value) {
      return $compiler().floodOpacity(value);
    }

    /**
     * Generates the {@code font-family} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontFamily(String value) {
      return $compiler().fontFamily(value);
    }

    /**
     * Generates the {@code font-size} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontSize(String value) {
      return $compiler().fontSize(value);
    }

    /**
     * Generates the {@code font-size-adjust} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontSizeAdjust(String value) {
      return $compiler().fontSizeAdjust(value);
    }

    /**
     * Generates the {@code font-stretch} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontStretch(String value) {
      return $compiler().fontStretch(value);
    }

    /**
     * Generates the {@code font-style} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontStyle(String value) {
      return $compiler().fontStyle(value);
    }

    /**
     * Generates the {@code font-variant} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontVariant(String value) {
      return $compiler().fontVariant(value);
    }

    /**
     * Generates the {@code font-weight} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction fontWeight(String value) {
      return $compiler().fontWeight(value);
    }

    /**
     * Generates the {@code for} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction forAttr(String value) {
      return $compiler().forAttr(value);
    }

    /**
     * Generates the {@code for} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction forElement(String value) {
      return $compiler().forElement(value);
    }

    /**
     * Generates the {@code glyph-orientation-horizontal} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction glyphOrientationHorizontal(String value) {
      return $compiler().glyphOrientationHorizontal(value);
    }

    /**
     * Generates the {@code glyph-orientation-vertical} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction glyphOrientationVertical(String value) {
      return $compiler().glyphOrientationVertical(value);
    }

    /**
     * Generates the {@code height} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction height(String value) {
      return $compiler().height(value);
    }

    /**
     * Generates the {@code hidden} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction hidden() {
      return $compiler().hidden();
    }

    /**
     * Generates the {@code href} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction href(String value) {
      return $compiler().href(value);
    }

    /**
     * Generates the {@code http-equiv} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction httpEquiv(String value) {
      return $compiler().httpEquiv(value);
    }

    /**
     * Generates the {@code id} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction id(String value) {
      return $compiler().id(value);
    }

    /**
     * Generates the {@code image-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction imageRendering(String value) {
      return $compiler().imageRendering(value);
    }

    /**
     * Generates the {@code integrity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction integrity(String value) {
      return $compiler().integrity(value);
    }

    /**
     * Generates the {@code lang} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction lang(String value) {
      return $compiler().lang(value);
    }

    /**
     * Generates the {@code letter-spacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction letterSpacing(String value) {
      return $compiler().letterSpacing(value);
    }

    /**
     * Generates the {@code lighting-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction lightingColor(String value) {
      return $compiler().lightingColor(value);
    }

    /**
     * Generates the {@code marker-end} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction markerEnd(String value) {
      return $compiler().markerEnd(value);
    }

    /**
     * Generates the {@code marker-mid} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction markerMid(String value) {
      return $compiler().markerMid(value);
    }

    /**
     * Generates the {@code marker-start} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction markerStart(String value) {
      return $compiler().markerStart(value);
    }

    /**
     * Generates the {@code mask} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction mask(String value) {
      return $compiler().mask(value);
    }

    /**
     * Generates the {@code mask-type} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction maskType(String value) {
      return $compiler().maskType(value);
    }

    /**
     * Generates the {@code maxlength} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction maxlength(String value) {
      return $compiler().maxlength(value);
    }

    /**
     * Generates the {@code media} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction media(String value) {
      return $compiler().media(value);
    }

    /**
     * Generates the {@code method} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction method(String value) {
      return $compiler().method(value);
    }

    /**
     * Generates the {@code minlength} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction minlength(String value) {
      return $compiler().minlength(value);
    }

    /**
     * Generates the {@code multiple} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction multiple() {
      return $compiler().multiple();
    }

    /**
     * Generates the {@code name} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction name(String value) {
      return $compiler().name(value);
    }

    /**
     * Generates the {@code nomodule} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction nomodule() {
      return $compiler().nomodule();
    }

    /**
     * Generates the {@code onafterprint} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onafterprint(String value) {
      return $compiler().onafterprint(value);
    }

    /**
     * Generates the {@code onbeforeprint} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onbeforeprint(String value) {
      return $compiler().onbeforeprint(value);
    }

    /**
     * Generates the {@code onbeforeunload} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onbeforeunload(String value) {
      return $compiler().onbeforeunload(value);
    }

    /**
     * Generates the {@code onclick} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onclick(String value) {
      return $compiler().onclick(value);
    }

    /**
     * Generates the {@code onhashchange} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onhashchange(String value) {
      return $compiler().onhashchange(value);
    }

    /**
     * Generates the {@code onlanguagechange} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onlanguagechange(String value) {
      return $compiler().onlanguagechange(value);
    }

    /**
     * Generates the {@code onmessage} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onmessage(String value) {
      return $compiler().onmessage(value);
    }

    /**
     * Generates the {@code onoffline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onoffline(String value) {
      return $compiler().onoffline(value);
    }

    /**
     * Generates the {@code ononline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction ononline(String value) {
      return $compiler().ononline(value);
    }

    /**
     * Generates the {@code onpagehide} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onpagehide(String value) {
      return $compiler().onpagehide(value);
    }

    /**
     * Generates the {@code onpageshow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onpageshow(String value) {
      return $compiler().onpageshow(value);
    }

    /**
     * Generates the {@code onpopstate} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onpopstate(String value) {
      return $compiler().onpopstate(value);
    }

    /**
     * Generates the {@code onrejectionhandled} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onrejectionhandled(String value) {
      return $compiler().onrejectionhandled(value);
    }

    /**
     * Generates the {@code onstorage} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onstorage(String value) {
      return $compiler().onstorage(value);
    }

    /**
     * Generates the {@code onsubmit} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onsubmit(String value) {
      return $compiler().onsubmit(value);
    }

    /**
     * Generates the {@code onunhandledrejection} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onunhandledrejection(String value) {
      return $compiler().onunhandledrejection(value);
    }

    /**
     * Generates the {@code onunload} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction onunload(String value) {
      return $compiler().onunload(value);
    }

    /**
     * Generates the {@code opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction opacity(String value) {
      return $compiler().opacity(value);
    }

    /**
     * Generates the {@code open} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction open() {
      return $compiler().open();
    }

    /**
     * Generates the {@code overflow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction overflow(String value) {
      return $compiler().overflow(value);
    }

    /**
     * Generates the {@code paint-order} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction paintOrder(String value) {
      return $compiler().paintOrder(value);
    }

    /**
     * Generates the {@code placeholder} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction placeholder(String value) {
      return $compiler().placeholder(value);
    }

    /**
     * Generates the {@code pointer-events} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction pointerEvents(String value) {
      return $compiler().pointerEvents(value);
    }

    /**
     * Generates the {@code property} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction property(String value) {
      return $compiler().property(value);
    }

    /**
     * Generates the {@code readonly} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction readonly() {
      return $compiler().readonly();
    }

    /**
     * Generates the {@code referrerpolicy} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction referrerpolicy(String value) {
      return $compiler().referrerpolicy(value);
    }

    /**
     * Generates the {@code rel} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction rel(String value) {
      return $compiler().rel(value);
    }

    /**
     * Generates the {@code required} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction required() {
      return $compiler().required();
    }

    /**
     * Generates the {@code rev} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction rev(String value) {
      return $compiler().rev(value);
    }

    /**
     * Generates the {@code reversed} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction reversed() {
      return $compiler().reversed();
    }

    /**
     * Generates the {@code role} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction role(String value) {
      return $compiler().role(value);
    }

    /**
     * Generates the {@code rows} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction rows(String value) {
      return $compiler().rows(value);
    }

    /**
     * Generates the {@code selected} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction selected() {
      return $compiler().selected();
    }

    /**
     * Generates the {@code shape-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction shapeRendering(String value) {
      return $compiler().shapeRendering(value);
    }

    /**
     * Generates the {@code size} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction size(String value) {
      return $compiler().size(value);
    }

    /**
     * Generates the {@code sizes} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction sizes(String value) {
      return $compiler().sizes(value);
    }

    /**
     * Generates the {@code spellcheck} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction spellcheck(String value) {
      return $compiler().spellcheck(value);
    }

    /**
     * Generates the {@code src} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction src(String value) {
      return $compiler().src(value);
    }

    /**
     * Generates the {@code srcset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction srcset(String value) {
      return $compiler().srcset(value);
    }

    /**
     * Generates the {@code start} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction start(String value) {
      return $compiler().start(value);
    }

    /**
     * Generates the {@code stop-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction stopColor(String value) {
      return $compiler().stopColor(value);
    }

    /**
     * Generates the {@code stop-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction stopOpacity(String value) {
      return $compiler().stopOpacity(value);
    }

    /**
     * Generates the {@code stroke} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction stroke(String value) {
      return $compiler().stroke(value);
    }

    /**
     * Generates the {@code stroke-dasharray} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeDasharray(String value) {
      return $compiler().strokeDasharray(value);
    }

    /**
     * Generates the {@code stroke-dashoffset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeDashoffset(String value) {
      return $compiler().strokeDashoffset(value);
    }

    /**
     * Generates the {@code stroke-linecap} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeLinecap(String value) {
      return $compiler().strokeLinecap(value);
    }

    /**
     * Generates the {@code stroke-linejoin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeLinejoin(String value) {
      return $compiler().strokeLinejoin(value);
    }

    /**
     * Generates the {@code stroke-miterlimit} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeMiterlimit(String value) {
      return $compiler().strokeMiterlimit(value);
    }

    /**
     * Generates the {@code stroke-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeOpacity(String value) {
      return $compiler().strokeOpacity(value);
    }

    /**
     * Generates the {@code stroke-width} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction strokeWidth(String value) {
      return $compiler().strokeWidth(value);
    }

    /**
     * Generates the {@code style} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction inlineStyle(String value) {
      return $compiler().inlineStyle(value);
    }

    /**
     * Generates the {@code tabindex} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction tabindex(String value) {
      return $compiler().tabindex(value);
    }

    /**
     * Generates the {@code target} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction target(String value) {
      return $compiler().target(value);
    }

    /**
     * Generates the {@code text-anchor} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction textAnchor(String value) {
      return $compiler().textAnchor(value);
    }

    /**
     * Generates the {@code text-decoration} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction textDecoration(String value) {
      return $compiler().textDecoration(value);
    }

    /**
     * Generates the {@code text-overflow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction textOverflow(String value) {
      return $compiler().textOverflow(value);
    }

    /**
     * Generates the {@code text-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction textRendering(String value) {
      return $compiler().textRendering(value);
    }

    /**
     * Generates the {@code transform} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction transform(String value) {
      return $compiler().transform(value);
    }

    /**
     * Generates the {@code transform-origin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction transformOrigin(String value) {
      return $compiler().transformOrigin(value);
    }

    /**
     * Generates the {@code translate} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction translate(String value) {
      return $compiler().translate(value);
    }

    /**
     * Generates the {@code type} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction type(String value) {
      return $compiler().type(value);
    }

    /**
     * Generates the {@code unicode-bidi} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction unicodeBidi(String value) {
      return $compiler().unicodeBidi(value);
    }

    /**
     * Generates the {@code value} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction value(String value) {
      return $compiler().value(value);
    }

    /**
     * Generates the {@code vector-effect} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction vectorEffect(String value) {
      return $compiler().vectorEffect(value);
    }

    /**
     * Generates the {@code viewBox} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction viewBox(String value) {
      return $compiler().viewBox(value);
    }

    /**
     * Generates the {@code visibility} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction visibility(String value) {
      return $compiler().visibility(value);
    }

    /**
     * Generates the {@code white-space} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction whiteSpace(String value) {
      return $compiler().whiteSpace(value);
    }

    /**
     * Generates the {@code width} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction width(String value) {
      return $compiler().width(value);
    }

    /**
     * Generates the {@code word-spacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction wordSpacing(String value) {
      return $compiler().wordSpacing(value);
    }

    /**
     * Generates the {@code wrap} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction wrap(String value) {
      return $compiler().wrap(value);
    }

    /**
     * Generates the {@code writing-mode} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction writingMode(String value) {
      return $compiler().writingMode(value);
    }

    /**
     * Generates the {@code xmlns} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    protected final AttributeInstruction xmlns(String value) {
      return $compiler().xmlns(value);
    }

    abstract CompilerAttributes $compiler();

  }

  /**
   * Provides the HTML attributes compiler methods.
   */
  public sealed interface CompilerAttributes permits Compiler {

    /**
     * Compiles the {@code accesskey} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction accesskey(String value);

    /**
     * Compiles the {@code action} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction action(String value);

    /**
     * Compiles the {@code align} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction align(String value);

    /**
     * Compiles the {@code alignment-baseline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction alignmentBaseline(String value);

    /**
     * Compiles the {@code alt} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction alt(String value);

    /**
     * Compiles the {@code aria-hidden} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction ariaHidden(String value);

    /**
     * Compiles the {@code aria-label} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction ariaLabel(String value);

    /**
     * Compiles the {@code async} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction async();

    /**
     * Compiles the {@code autocomplete} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction autocomplete(String value);

    /**
     * Compiles the {@code autofocus} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction autofocus();

    /**
     * Compiles the {@code baseline-shift} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction baselineShift(String value);

    /**
     * Compiles the {@code border} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction border(String value);

    /**
     * Compiles the {@code cellpadding} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction cellpadding(String value);

    /**
     * Compiles the {@code cellspacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction cellspacing(String value);

    /**
     * Compiles the {@code charset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction charset(String value);

    /**
     * Compiles the {@code cite} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction cite(String value);

    /**
     * Compiles the {@code class} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction className(String value);

    /**
     * Compiles the {@code clip-rule} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction clipRule(String value);

    /**
     * Compiles the {@code color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction color(String value);

    /**
     * Compiles the {@code color-interpolation} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction colorInterpolation(String value);

    /**
     * Compiles the {@code color-interpolation-filters} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction colorInterpolationFilters(String value);

    /**
     * Compiles the {@code cols} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction cols(String value);

    /**
     * Compiles the {@code content} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction content(String value);

    /**
     * Compiles the {@code contenteditable} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction contenteditable(String value);

    /**
     * Compiles the {@code crossorigin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction crossorigin(String value);

    /**
     * Compiles the {@code cursor} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction cursor(String value);

    /**
     * Compiles the {@code d} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction d(String value);

    /**
     * Compiles the {@code defer} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction defer();

    /**
     * Compiles the {@code dir} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction dir(String value);

    /**
     * Compiles the {@code direction} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction direction(String value);

    /**
     * Compiles the {@code dirname} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction dirname(String value);

    /**
     * Compiles the {@code disabled} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction disabled();

    /**
     * Compiles the {@code display} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction display(String value);

    /**
     * Compiles the {@code dominant-baseline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction dominantBaseline(String value);

    /**
     * Compiles the {@code draggable} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction draggable(String value);

    /**
     * Compiles the {@code enctype} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction enctype(String value);

    /**
     * Compiles the {@code fill} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fill(String value);

    /**
     * Compiles the {@code fill-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fillOpacity(String value);

    /**
     * Compiles the {@code fill-rule} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fillRule(String value);

    /**
     * Compiles the {@code filter} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction filter(String value);

    /**
     * Compiles the {@code flood-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction floodColor(String value);

    /**
     * Compiles the {@code flood-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction floodOpacity(String value);

    /**
     * Compiles the {@code font-family} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontFamily(String value);

    /**
     * Compiles the {@code font-size} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontSize(String value);

    /**
     * Compiles the {@code font-size-adjust} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontSizeAdjust(String value);

    /**
     * Compiles the {@code font-stretch} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontStretch(String value);

    /**
     * Compiles the {@code font-style} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontStyle(String value);

    /**
     * Compiles the {@code font-variant} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontVariant(String value);

    /**
     * Compiles the {@code font-weight} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction fontWeight(String value);

    /**
     * Compiles the {@code for} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction forAttr(String value);

    /**
     * Compiles the {@code for} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction forElement(String value);

    /**
     * Compiles the {@code glyph-orientation-horizontal} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction glyphOrientationHorizontal(String value);

    /**
     * Compiles the {@code glyph-orientation-vertical} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction glyphOrientationVertical(String value);

    /**
     * Compiles the {@code height} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction height(String value);

    /**
     * Compiles the {@code hidden} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction hidden();

    /**
     * Compiles the {@code href} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction href(String value);

    /**
     * Compiles the {@code http-equiv} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction httpEquiv(String value);

    /**
     * Compiles the {@code id} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction id(String value);

    /**
     * Compiles the {@code image-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction imageRendering(String value);

    /**
     * Compiles the {@code integrity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction integrity(String value);

    /**
     * Compiles the {@code lang} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction lang(String value);

    /**
     * Compiles the {@code letter-spacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction letterSpacing(String value);

    /**
     * Compiles the {@code lighting-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction lightingColor(String value);

    /**
     * Compiles the {@code marker-end} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction markerEnd(String value);

    /**
     * Compiles the {@code marker-mid} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction markerMid(String value);

    /**
     * Compiles the {@code marker-start} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction markerStart(String value);

    /**
     * Compiles the {@code mask} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction mask(String value);

    /**
     * Compiles the {@code mask-type} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction maskType(String value);

    /**
     * Compiles the {@code maxlength} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction maxlength(String value);

    /**
     * Compiles the {@code media} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction media(String value);

    /**
     * Compiles the {@code method} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction method(String value);

    /**
     * Compiles the {@code minlength} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction minlength(String value);

    /**
     * Compiles the {@code multiple} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction multiple();

    /**
     * Compiles the {@code name} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction name(String value);

    /**
     * Compiles the {@code nomodule} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction nomodule();

    /**
     * Compiles the {@code onafterprint} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onafterprint(String value);

    /**
     * Compiles the {@code onbeforeprint} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onbeforeprint(String value);

    /**
     * Compiles the {@code onbeforeunload} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onbeforeunload(String value);

    /**
     * Compiles the {@code onclick} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onclick(String value);

    /**
     * Compiles the {@code onhashchange} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onhashchange(String value);

    /**
     * Compiles the {@code onlanguagechange} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onlanguagechange(String value);

    /**
     * Compiles the {@code onmessage} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onmessage(String value);

    /**
     * Compiles the {@code onoffline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onoffline(String value);

    /**
     * Compiles the {@code ononline} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction ononline(String value);

    /**
     * Compiles the {@code onpagehide} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onpagehide(String value);

    /**
     * Compiles the {@code onpageshow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onpageshow(String value);

    /**
     * Compiles the {@code onpopstate} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onpopstate(String value);

    /**
     * Compiles the {@code onrejectionhandled} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onrejectionhandled(String value);

    /**
     * Compiles the {@code onstorage} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onstorage(String value);

    /**
     * Compiles the {@code onsubmit} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onsubmit(String value);

    /**
     * Compiles the {@code onunhandledrejection} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onunhandledrejection(String value);

    /**
     * Compiles the {@code onunload} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction onunload(String value);

    /**
     * Compiles the {@code opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction opacity(String value);

    /**
     * Compiles the {@code open} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction open();

    /**
     * Compiles the {@code overflow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction overflow(String value);

    /**
     * Compiles the {@code paint-order} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction paintOrder(String value);

    /**
     * Compiles the {@code placeholder} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction placeholder(String value);

    /**
     * Compiles the {@code pointer-events} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction pointerEvents(String value);

    /**
     * Compiles the {@code property} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction property(String value);

    /**
     * Compiles the {@code readonly} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction readonly();

    /**
     * Compiles the {@code referrerpolicy} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction referrerpolicy(String value);

    /**
     * Compiles the {@code rel} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction rel(String value);

    /**
     * Compiles the {@code required} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction required();

    /**
     * Compiles the {@code rev} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction rev(String value);

    /**
     * Compiles the {@code reversed} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction reversed();

    /**
     * Compiles the {@code role} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction role(String value);

    /**
     * Compiles the {@code rows} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction rows(String value);

    /**
     * Compiles the {@code selected} boolean attribute.
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction selected();

    /**
     * Compiles the {@code shape-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction shapeRendering(String value);

    /**
     * Compiles the {@code size} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction size(String value);

    /**
     * Compiles the {@code sizes} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction sizes(String value);

    /**
     * Compiles the {@code spellcheck} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction spellcheck(String value);

    /**
     * Compiles the {@code src} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction src(String value);

    /**
     * Compiles the {@code srcset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction srcset(String value);

    /**
     * Compiles the {@code start} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction start(String value);

    /**
     * Compiles the {@code stop-color} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction stopColor(String value);

    /**
     * Compiles the {@code stop-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction stopOpacity(String value);

    /**
     * Compiles the {@code stroke} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction stroke(String value);

    /**
     * Compiles the {@code stroke-dasharray} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeDasharray(String value);

    /**
     * Compiles the {@code stroke-dashoffset} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeDashoffset(String value);

    /**
     * Compiles the {@code stroke-linecap} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeLinecap(String value);

    /**
     * Compiles the {@code stroke-linejoin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeLinejoin(String value);

    /**
     * Compiles the {@code stroke-miterlimit} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeMiterlimit(String value);

    /**
     * Compiles the {@code stroke-opacity} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeOpacity(String value);

    /**
     * Compiles the {@code stroke-width} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction strokeWidth(String value);

    /**
     * Compiles the {@code style} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction inlineStyle(String value);

    /**
     * Compiles the {@code tabindex} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction tabindex(String value);

    /**
     * Compiles the {@code target} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction target(String value);

    /**
     * Compiles the {@code text-anchor} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction textAnchor(String value);

    /**
     * Compiles the {@code text-decoration} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction textDecoration(String value);

    /**
     * Compiles the {@code text-overflow} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction textOverflow(String value);

    /**
     * Compiles the {@code text-rendering} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction textRendering(String value);

    /**
     * Compiles the {@code transform} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction transform(String value);

    /**
     * Compiles the {@code transform-origin} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction transformOrigin(String value);

    /**
     * Compiles the {@code translate} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction translate(String value);

    /**
     * Compiles the {@code type} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction type(String value);

    /**
     * Compiles the {@code unicode-bidi} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction unicodeBidi(String value);

    /**
     * Compiles the {@code value} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction value(String value);

    /**
     * Compiles the {@code vector-effect} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction vectorEffect(String value);

    /**
     * Compiles the {@code viewBox} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction viewBox(String value);

    /**
     * Compiles the {@code visibility} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction visibility(String value);

    /**
     * Compiles the {@code white-space} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction whiteSpace(String value);

    /**
     * Compiles the {@code width} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction width(String value);

    /**
     * Compiles the {@code word-spacing} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction wordSpacing(String value);

    /**
     * Compiles the {@code wrap} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction wrap(String value);

    /**
     * Compiles the {@code writing-mode} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction writingMode(String value);

    /**
     * Compiles the {@code xmlns} attribute with the specified value.
     *
     * @param value
     *        the value of the attribute
     *
     * @return an instruction representing this attribute.
     */
    AttributeInstruction xmlns(String value);

  }

}
