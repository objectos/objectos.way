/*
 * Copyright (C) 2023-2025 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package objectos.way;

import java.io.IOException;
import java.util.Objects;
import java.util.function.Consumer;

sealed abstract class HtmlMarkup permits HtmlMarkupOfHtml, HtmlMarkupOfTestable {

  /// Renders the specified attribute at the root of a document or fragment.
  /// @param object the attribute
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfAttribute attr(Html.AttributeObject object);

  /// Generates and returns the HTML represented by this markup instance.
  /// @return the HTML represented by this markup instance.
  public abstract String toHtml();

  /// Writes out the HTML generated by this markup instance.
  /// This method may be invoked at most once per markup instance.
  /// @param out where to write out the HTML
  /// @throws IOException if an I/O error occurs
  public abstract void writeTo(Appendable out) throws IOException;

  // START generated code

  //
  // WAY
  //

  /// Renders the `data-on-click` attribute with the specified script.
  /// @param script the script to be executed
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfDataOn dataOnClick(Consumer<? super Script> script);

  /// Renders the `data-on-input` attribute with the specified script.
  /// @param script the script to be executed
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfDataOn dataOnInput(Consumer<? super Script> script);

  /// Renders the `data-on-load` attribute with the specified script.
  /// @param script the script to be executed
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfDataOn dataOnLoad(Consumer<? super Script> script);

  /// Renders the `data-on-success` attribute with the specified script.
  /// @param script the script to be executed
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfDataOn dataOnSuccess(Consumer<? super Script> script);

  /// Renders the `data-frame` attribute for a frame with the specified name.
  /// @param name the name of the frame
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfAttribute dataFrame(String name);

  /// Renders the `data-frame` attribute for a frame with the specified name and value.
  /// @param name the name of the frame
  /// @param value the value of the frame
  /// @return an instruction representing the attribute
  public abstract Html.Instruction.OfAttribute dataFrame(String name, String value);

  /// Renders the `class` attribute by processing the specified value.
  ///
  /// This method is designed to work with Java text blocks. It first removes
  /// any leading and trailing whitespace. Additionally, any sequence of
  /// consecutive whitespace characters is replaced by a single space
  /// character.
  ///
  /// For example, the following invocation:
  ///
  /// ```java
  /// css("""
  ///     display:inline-flex
  ///     justify-content:center
  ///
  ///     background-color:blue-500
  ///     """);
  /// ```
  ///
  /// Produces the same result as invoking
  /// `className("display:inline-flex justify-content:center background-color:blue-500")`.
  ///
  /// @param value the text block containing class names, possibly spread across multiple lines
  /// @return an instruction representing this attribute.
  public abstract Html.Instruction.OfAttribute css(String value);

  /// Renders the specified components in order as part of this document.
  /// @param components the components to be rendered as part of this document
  /// @return an instruction representing the rendered components.
  public abstract Html.Instruction.OfFragment c(Html.Component... components);

  /// Renders the specified components in order as part of this document.
  /// @param components the components to be rendered as part of this document
  /// @return an instruction representing the rendered components.
  public abstract Html.Instruction.OfFragment c(Iterable<? extends Html.Component> components);

  /// Renders the specified fragment as part of this document.
  ///
  /// The following Objectos HTML component:
  ///
  /// {@snippet file = "objectos/way/HtmlMarkupJavadoc.java" region = "f0"}
  ///
  /// Generates the following HTML:
  ///
  /// ```html
  /// <ul>
  /// <li>Mon</li>
  /// <li>Wed</li>
  /// <li>Fri</li>
  /// </ul>
  /// ```
  ///
  /// @param fragment the fragment to include
  /// @return an instruction representing the fragment
  public abstract Html.Instruction.OfFragment f(Html.Fragment.Of0 fragment);

  /// Renders the specified fragment as part of this document.
  ///
  /// The following Objectos HTML component:
  ///
  /// {@snippet file = "objectos/way/HtmlMarkupJavadoc.java" region = "f1"}
  ///
  /// Generates the following HTML:
  ///
  /// ```html
  /// <ul>
  /// <li>Mon</li>
  /// <li>Wed</li>
  /// <li>Fri</li>
  /// </ul>
  /// ```
  ///
  /// @param <T1> the type of the first argument
  /// @param fragment the fragment to include
  /// @param arg1 the first argument
  /// @return an instruction representing the fragment
  public abstract <T1> Html.Instruction.OfFragment f(Html.Fragment.Of1<T1> fragment, T1 arg1);

  /// Renders the specified fragment as part of this document.
  ///
  /// The following Objectos HTML component:
  ///
  /// {@snippet file = "objectos/way/HtmlMarkupJavadoc.java" region = "f2"}
  ///
  /// Generates the following HTML:
  ///
  /// ```html
  /// <div><button>OK</button><button>Cancel</button></div>
  /// ```
  ///
  /// @param <T1> the type of the first argument
  /// @param <T2> the type of the second argument
  /// @param fragment the fragment to include
  /// @param arg1 the first argument
  /// @param arg2 the second argument
  /// @return an instruction representing the fragment
  public abstract <T1, T2> Html.Instruction.OfFragment f(Html.Fragment.Of2<T1, T2> fragment, T1 arg1, T2 arg2);

  /// Renders the specified fragment as part of this document.
  ///
  /// The following Objectos HTML component:
  ///
  /// {@snippet file = "objectos/way/HtmlMarkupJavadoc.java" region = "f3"}
  ///
  /// Generates the following HTML:
  ///
  /// ```html
  /// <div>
  /// <p>City<span>Tokyo</span></p>
  /// <p>Country<span>Japan</span></p>
  /// </div>
  /// ```
  ///
  /// @param <T1> the type of the first argument
  /// @param <T2> the type of the second argument
  /// @param <T3> the type of the third argument
  /// @param fragment the fragment to include
  /// @param arg1 the first argument
  /// @param arg2 the second argument
  /// @param arg3 the third argument
  /// @return an instruction representing the fragment
  public abstract <T1, T2, T3> Html.Instruction.OfFragment f(Html.Fragment.Of3<T1, T2, T3> fragment, T1 arg1, T2 arg2, T3 arg3);

  /// Renders the specified fragment as part of this document.
  ///
  /// @param <T1> the type of the first argument
  /// @param <T2> the type of the second argument
  /// @param <T3> the type of the third argument
  /// @param <T4> the type of the fourth argument
  /// @param fragment the fragment to include
  /// @param arg1 the first argument
  /// @param arg2 the second argument
  /// @param arg3 the third argument
  /// @param arg4 the fourth argument
  /// @return an instruction representing the fragment
  public abstract <T1, T2, T3, T4> Html.Instruction.OfFragment f(Html.Fragment.Of4<T1, T2, T3, T4> fragment, T1 arg1, T2 arg2, T3 arg3, T4 arg4);

  /// Flattens the specified instructions so that each of the specified
  /// instructions is individually added, in order, to a receiving element.
  /// @param contents the instructions to be flattened
  /// @return an instruction representing this flatten operation
  public abstract Html.Instruction.OfElement flatten(Html.Instruction... contents);

  /// The no-op instruction.
  /// @return the no-op instruction.
  public abstract Html.Instruction.NoOp noop();

  //
  // TESTABLE
  //

  /// Formats the specified value as a testable table cell with the specified fixed width.
  /// @param value the cell value
  /// @param width the fixed width of the cell
  /// @return always the cell value
  public abstract String testableCell(String value, int width);

  /// Formats the specified name and value as a testable field.
  /// @param name the field name
  /// @param value the field value
  /// @return always the field value
  public abstract String testableField(String name, String value);

  /// Formats the specified name as a testable field name.
  /// @param name the field name
  /// @return the specified field name
  public abstract String testableFieldName(String name);

  /// Formats the specified value as a testable field value.
  /// @param value the field value
  /// @return the specified field value
  public abstract String testableFieldValue(String value);

  /// Formats the specified value as a testable heading level 1.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH1(String value);

  /// Formats the specified value as a testable heading level 2.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH2(String value);

  /// Formats the specified value as a testable heading level 3.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH3(String value);

  /// Formats the specified value as a testable heading level 4.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH4(String value);

  /// Formats the specified value as a testable heading level 5.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH5(String value);

  /// Formats the specified value as a testable heading level 6.
  /// @param value the heading value
  /// @return the specified value
  public abstract String testableH6(String value);

  /// Formats a line separator at the testable output exclusively.
  /// @return a no-op instruction
  public abstract Html.Instruction.NoOp testableNewLine();

  //
  // ELEMENTS
  //

  abstract Html.Instruction.OfElement elem0(Html.ElementName name, Html.Instruction... contents);

  abstract Html.Instruction.OfElement elem0(Html.ElementName name, String text);

  /// Renders an HTML element with the specified name and contents.
  /// @param name the element name
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element
  public final Html.Instruction.OfElement elem(Html.ElementName name, Html.Instruction... contents) {
    Objects.requireNonNull(name, "name == null");
    return elem0(name, contents);
  }

  /// Renders an HTML element with the specified name and text.
  /// @param name the element name
  /// @param text the text value of this element
  /// @return an instruction representing the element
  public final Html.Instruction.OfElement elem(Html.ElementName name, String text) {
    Objects.requireNonNull(name, "name == null");
    return elem0(name, text);
  }

  /// Renders the `<!DOCTYPE html>` doctype.
  public abstract void doctype();

  /// Renders the `a` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement a(Html.Instruction... contents) {
    return elem0(HtmlElementName.A, contents);
  }

  /// Renders the `a` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement a(String text) {
    return elem0(HtmlElementName.A, text);
  }

  /// Renders the `abbr` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement abbr(Html.Instruction... contents) {
    return elem0(HtmlElementName.ABBR, contents);
  }

  /// Renders the `abbr` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement abbr(String text) {
    return elem0(HtmlElementName.ABBR, text);
  }

  /// Renders the `article` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement article(Html.Instruction... contents) {
    return elem0(HtmlElementName.ARTICLE, contents);
  }

  /// Renders the `article` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement article(String text) {
    return elem0(HtmlElementName.ARTICLE, text);
  }

  /// Renders the `aside` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement aside(Html.Instruction... contents) {
    return elem0(HtmlElementName.ASIDE, contents);
  }

  /// Renders the `aside` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement aside(String text) {
    return elem0(HtmlElementName.ASIDE, text);
  }

  /// Renders the `b` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement b(Html.Instruction... contents) {
    return elem0(HtmlElementName.B, contents);
  }

  /// Renders the `b` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement b(String text) {
    return elem0(HtmlElementName.B, text);
  }

  /// Renders the `blockquote` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement blockquote(Html.Instruction... contents) {
    return elem0(HtmlElementName.BLOCKQUOTE, contents);
  }

  /// Renders the `blockquote` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement blockquote(String text) {
    return elem0(HtmlElementName.BLOCKQUOTE, text);
  }

  /// Renders the `body` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement body(Html.Instruction... contents) {
    return elem0(HtmlElementName.BODY, contents);
  }

  /// Renders the `body` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement body(String text) {
    return elem0(HtmlElementName.BODY, text);
  }

  /// Renders the `br` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement br(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.BR, contents);
  }

  /// Renders the `button` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement button(Html.Instruction... contents) {
    return elem0(HtmlElementName.BUTTON, contents);
  }

  /// Renders the `button` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement button(String text) {
    return elem0(HtmlElementName.BUTTON, text);
  }

  /// Renders the `clipPath` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement clipPath(Html.Instruction... contents) {
    return elem0(HtmlElementName.CLIPPATH, contents);
  }

  /// Renders the `code` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement code(Html.Instruction... contents) {
    return elem0(HtmlElementName.CODE, contents);
  }

  /// Renders the `code` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement code(String text) {
    return elem0(HtmlElementName.CODE, text);
  }

  /// Renders the `dd` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dd(Html.Instruction... contents) {
    return elem0(HtmlElementName.DD, contents);
  }

  /// Renders the `dd` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dd(String text) {
    return elem0(HtmlElementName.DD, text);
  }

  /// Renders the `defs` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement defs(Html.Instruction... contents) {
    return elem0(HtmlElementName.DEFS, contents);
  }

  /// Renders the `defs` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement defs(String text) {
    return elem0(HtmlElementName.DEFS, text);
  }

  /// Renders the `details` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement details(Html.Instruction... contents) {
    return elem0(HtmlElementName.DETAILS, contents);
  }

  /// Renders the `details` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement details(String text) {
    return elem0(HtmlElementName.DETAILS, text);
  }

  /// Renders the `dialog` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dialog(Html.Instruction... contents) {
    return elem0(HtmlElementName.DIALOG, contents);
  }

  /// Renders the `dialog` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dialog(String text) {
    return elem0(HtmlElementName.DIALOG, text);
  }

  /// Renders the `div` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement div(Html.Instruction... contents) {
    return elem0(HtmlElementName.DIV, contents);
  }

  /// Renders the `div` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement div(String text) {
    return elem0(HtmlElementName.DIV, text);
  }

  /// Renders the `dl` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dl(Html.Instruction... contents) {
    return elem0(HtmlElementName.DL, contents);
  }

  /// Renders the `dl` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dl(String text) {
    return elem0(HtmlElementName.DL, text);
  }

  /// Renders the `dt` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dt(Html.Instruction... contents) {
    return elem0(HtmlElementName.DT, contents);
  }

  /// Renders the `dt` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement dt(String text) {
    return elem0(HtmlElementName.DT, text);
  }

  /// Renders the `em` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement em(Html.Instruction... contents) {
    return elem0(HtmlElementName.EM, contents);
  }

  /// Renders the `em` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement em(String text) {
    return elem0(HtmlElementName.EM, text);
  }

  /// Renders the `fieldset` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement fieldset(Html.Instruction... contents) {
    return elem0(HtmlElementName.FIELDSET, contents);
  }

  /// Renders the `fieldset` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement fieldset(String text) {
    return elem0(HtmlElementName.FIELDSET, text);
  }

  /// Renders the `figure` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement figure(Html.Instruction... contents) {
    return elem0(HtmlElementName.FIGURE, contents);
  }

  /// Renders the `figure` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement figure(String text) {
    return elem0(HtmlElementName.FIGURE, text);
  }

  /// Renders the `footer` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement footer(Html.Instruction... contents) {
    return elem0(HtmlElementName.FOOTER, contents);
  }

  /// Renders the `footer` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement footer(String text) {
    return elem0(HtmlElementName.FOOTER, text);
  }

  /// Renders the `form` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement form(Html.Instruction... contents) {
    return elem0(HtmlElementName.FORM, contents);
  }

  /// Renders the `g` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement g(Html.Instruction... contents) {
    return elem0(HtmlElementName.G, contents);
  }

  /// Renders the `g` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement g(String text) {
    return elem0(HtmlElementName.G, text);
  }

  /// Renders the `h1` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h1(Html.Instruction... contents) {
    return elem0(HtmlElementName.H1, contents);
  }

  /// Renders the `h1` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h1(String text) {
    return elem0(HtmlElementName.H1, text);
  }

  /// Renders the `h2` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h2(Html.Instruction... contents) {
    return elem0(HtmlElementName.H2, contents);
  }

  /// Renders the `h2` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h2(String text) {
    return elem0(HtmlElementName.H2, text);
  }

  /// Renders the `h3` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h3(Html.Instruction... contents) {
    return elem0(HtmlElementName.H3, contents);
  }

  /// Renders the `h3` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h3(String text) {
    return elem0(HtmlElementName.H3, text);
  }

  /// Renders the `h4` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h4(Html.Instruction... contents) {
    return elem0(HtmlElementName.H4, contents);
  }

  /// Renders the `h4` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h4(String text) {
    return elem0(HtmlElementName.H4, text);
  }

  /// Renders the `h5` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h5(Html.Instruction... contents) {
    return elem0(HtmlElementName.H5, contents);
  }

  /// Renders the `h5` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h5(String text) {
    return elem0(HtmlElementName.H5, text);
  }

  /// Renders the `h6` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h6(Html.Instruction... contents) {
    return elem0(HtmlElementName.H6, contents);
  }

  /// Renders the `h6` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement h6(String text) {
    return elem0(HtmlElementName.H6, text);
  }

  /// Renders the `head` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement head(Html.Instruction... contents) {
    return elem0(HtmlElementName.HEAD, contents);
  }

  /// Renders the `head` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement head(String text) {
    return elem0(HtmlElementName.HEAD, text);
  }

  /// Renders the `header` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement header(Html.Instruction... contents) {
    return elem0(HtmlElementName.HEADER, contents);
  }

  /// Renders the `header` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement header(String text) {
    return elem0(HtmlElementName.HEADER, text);
  }

  /// Renders the `hgroup` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement hgroup(Html.Instruction... contents) {
    return elem0(HtmlElementName.HGROUP, contents);
  }

  /// Renders the `hgroup` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement hgroup(String text) {
    return elem0(HtmlElementName.HGROUP, text);
  }

  /// Renders the `hr` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement hr(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.HR, contents);
  }

  /// Renders the `html` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement html(Html.Instruction... contents) {
    return elem0(HtmlElementName.HTML, contents);
  }

  /// Renders the `html` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement html(String text) {
    return elem0(HtmlElementName.HTML, text);
  }

  /// Renders the `img` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement img(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.IMG, contents);
  }

  /// Renders the `input` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement input(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.INPUT, contents);
  }

  /// Renders the `kbd` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement kbd(Html.Instruction... contents) {
    return elem0(HtmlElementName.KBD, contents);
  }

  /// Renders the `kbd` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement kbd(String text) {
    return elem0(HtmlElementName.KBD, text);
  }

  /// Renders the `label` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement label(Html.Instruction... contents) {
    return elem0(HtmlElementName.LABEL, contents);
  }

  /// Renders the `legend` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement legend(Html.Instruction... contents) {
    return elem0(HtmlElementName.LEGEND, contents);
  }

  /// Renders the `legend` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement legend(String text) {
    return elem0(HtmlElementName.LEGEND, text);
  }

  /// Renders the `li` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement li(Html.Instruction... contents) {
    return elem0(HtmlElementName.LI, contents);
  }

  /// Renders the `li` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement li(String text) {
    return elem0(HtmlElementName.LI, text);
  }

  /// Renders the `link` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement link(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.LINK, contents);
  }

  /// Renders the `main` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement main(Html.Instruction... contents) {
    return elem0(HtmlElementName.MAIN, contents);
  }

  /// Renders the `main` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement main(String text) {
    return elem0(HtmlElementName.MAIN, text);
  }

  /// Renders the `menu` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement menu(Html.Instruction... contents) {
    return elem0(HtmlElementName.MENU, contents);
  }

  /// Renders the `menu` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement menu(String text) {
    return elem0(HtmlElementName.MENU, text);
  }

  /// Renders the `meta` element with the specified content.
  /// @param contents the attributes of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement meta(Html.Instruction.OfVoid... contents) {
    return elem0(HtmlElementName.META, contents);
  }

  /// Renders the `nav` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement nav(Html.Instruction... contents) {
    return elem0(HtmlElementName.NAV, contents);
  }

  /// Renders the `nav` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement nav(String text) {
    return elem0(HtmlElementName.NAV, text);
  }

  /// Renders the `ol` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement ol(Html.Instruction... contents) {
    return elem0(HtmlElementName.OL, contents);
  }

  /// Renders the `ol` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement ol(String text) {
    return elem0(HtmlElementName.OL, text);
  }

  /// Renders the `optgroup` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement optgroup(Html.Instruction... contents) {
    return elem0(HtmlElementName.OPTGROUP, contents);
  }

  /// Renders the `optgroup` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement optgroup(String text) {
    return elem0(HtmlElementName.OPTGROUP, text);
  }

  /// Renders the `option` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement option(Html.Instruction... contents) {
    return elem0(HtmlElementName.OPTION, contents);
  }

  /// Renders the `option` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement option(String text) {
    return elem0(HtmlElementName.OPTION, text);
  }

  /// Renders the `p` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement p(Html.Instruction... contents) {
    return elem0(HtmlElementName.P, contents);
  }

  /// Renders the `p` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement p(String text) {
    return elem0(HtmlElementName.P, text);
  }

  /// Renders the `path` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement path(Html.Instruction... contents) {
    return elem0(HtmlElementName.PATH, contents);
  }

  /// Renders the `path` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement path(String text) {
    return elem0(HtmlElementName.PATH, text);
  }

  /// Renders the `pre` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement pre(Html.Instruction... contents) {
    return elem0(HtmlElementName.PRE, contents);
  }

  /// Renders the `pre` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement pre(String text) {
    return elem0(HtmlElementName.PRE, text);
  }

  /// Renders the `progress` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement progress(Html.Instruction... contents) {
    return elem0(HtmlElementName.PROGRESS, contents);
  }

  /// Renders the `progress` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement progress(String text) {
    return elem0(HtmlElementName.PROGRESS, text);
  }

  /// Renders the `samp` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement samp(Html.Instruction... contents) {
    return elem0(HtmlElementName.SAMP, contents);
  }

  /// Renders the `samp` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement samp(String text) {
    return elem0(HtmlElementName.SAMP, text);
  }

  /// Renders the `script` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement script(Html.Instruction... contents) {
    return elem0(HtmlElementName.SCRIPT, contents);
  }

  /// Renders the `script` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement script(String text) {
    return elem0(HtmlElementName.SCRIPT, text);
  }

  /// Renders the `section` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement section(Html.Instruction... contents) {
    return elem0(HtmlElementName.SECTION, contents);
  }

  /// Renders the `section` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement section(String text) {
    return elem0(HtmlElementName.SECTION, text);
  }

  /// Renders the `select` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement select(Html.Instruction... contents) {
    return elem0(HtmlElementName.SELECT, contents);
  }

  /// Renders the `select` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement select(String text) {
    return elem0(HtmlElementName.SELECT, text);
  }

  /// Renders the `small` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement small(Html.Instruction... contents) {
    return elem0(HtmlElementName.SMALL, contents);
  }

  /// Renders the `small` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement small(String text) {
    return elem0(HtmlElementName.SMALL, text);
  }

  /// Renders the `span` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement span(Html.Instruction... contents) {
    return elem0(HtmlElementName.SPAN, contents);
  }

  /// Renders the `span` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement span(String text) {
    return elem0(HtmlElementName.SPAN, text);
  }

  /// Renders the `strong` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement strong(Html.Instruction... contents) {
    return elem0(HtmlElementName.STRONG, contents);
  }

  /// Renders the `strong` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement strong(String text) {
    return elem0(HtmlElementName.STRONG, text);
  }

  /// Renders the `style` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement style(Html.Instruction... contents) {
    return elem0(HtmlElementName.STYLE, contents);
  }

  /// Renders the `sub` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement sub(Html.Instruction... contents) {
    return elem0(HtmlElementName.SUB, contents);
  }

  /// Renders the `sub` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement sub(String text) {
    return elem0(HtmlElementName.SUB, text);
  }

  /// Renders the `summary` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement summary(Html.Instruction... contents) {
    return elem0(HtmlElementName.SUMMARY, contents);
  }

  /// Renders the `summary` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement summary(String text) {
    return elem0(HtmlElementName.SUMMARY, text);
  }

  /// Renders the `sup` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement sup(Html.Instruction... contents) {
    return elem0(HtmlElementName.SUP, contents);
  }

  /// Renders the `sup` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement sup(String text) {
    return elem0(HtmlElementName.SUP, text);
  }

  /// Renders the `svg` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement svg(Html.Instruction... contents) {
    return elem0(HtmlElementName.SVG, contents);
  }

  /// Renders the `svg` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement svg(String text) {
    return elem0(HtmlElementName.SVG, text);
  }

  /// Renders the `table` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement table(Html.Instruction... contents) {
    return elem0(HtmlElementName.TABLE, contents);
  }

  /// Renders the `table` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement table(String text) {
    return elem0(HtmlElementName.TABLE, text);
  }

  /// Renders the `tbody` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement tbody(Html.Instruction... contents) {
    return elem0(HtmlElementName.TBODY, contents);
  }

  /// Renders the `tbody` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement tbody(String text) {
    return elem0(HtmlElementName.TBODY, text);
  }

  /// Renders the `td` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement td(Html.Instruction... contents) {
    return elem0(HtmlElementName.TD, contents);
  }

  /// Renders the `td` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement td(String text) {
    return elem0(HtmlElementName.TD, text);
  }

  /// Renders the `template` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement template(Html.Instruction... contents) {
    return elem0(HtmlElementName.TEMPLATE, contents);
  }

  /// Renders the `template` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement template(String text) {
    return elem0(HtmlElementName.TEMPLATE, text);
  }

  /// Renders the `textarea` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement textarea(Html.Instruction... contents) {
    return elem0(HtmlElementName.TEXTAREA, contents);
  }

  /// Renders the `textarea` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement textarea(String text) {
    return elem0(HtmlElementName.TEXTAREA, text);
  }

  /// Renders the `th` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement th(Html.Instruction... contents) {
    return elem0(HtmlElementName.TH, contents);
  }

  /// Renders the `th` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement th(String text) {
    return elem0(HtmlElementName.TH, text);
  }

  /// Renders the `thead` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement thead(Html.Instruction... contents) {
    return elem0(HtmlElementName.THEAD, contents);
  }

  /// Renders the `thead` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement thead(String text) {
    return elem0(HtmlElementName.THEAD, text);
  }

  /// Renders the `title` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement title(Html.Instruction... contents) {
    return elem0(HtmlElementName.TITLE, contents);
  }

  /// Renders the `tr` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement tr(Html.Instruction... contents) {
    return elem0(HtmlElementName.TR, contents);
  }

  /// Renders the `tr` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement tr(String text) {
    return elem0(HtmlElementName.TR, text);
  }

  /// Renders the `ul` element with the specified content.
  /// @param contents the attributes and children of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement ul(Html.Instruction... contents) {
    return elem0(HtmlElementName.UL, contents);
  }

  /// Renders the `ul` element with the specified text.
  /// @param text the text value of the element
  /// @return an instruction representing the element.
  public final Html.Instruction.OfElement ul(String text) {
    return elem0(HtmlElementName.UL, text);
  }

  //
  // ATTRIBUTES
  //

  abstract Html.Instruction.OfAttribute attr0(Html.AttributeName name);

  abstract Html.Instruction.OfAttribute attr0(Html.AttributeName name, Object value);

  /// Renders an attribute with the specified name.
  /// @param name the attribute name
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute attr(Html.AttributeName name) {
    Objects.requireNonNull(name, "name == null");
    return attr0(name);
  }

  /// Renders an attribute with the specified name and value.
  /// @param name the attribute name
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute attr(Html.AttributeName name, String value) {
    Objects.requireNonNull(name, "name == null");
    return attr0(name, value);
  }

  /// Renders the `accesskey` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute accesskey(String value) {
    return attr0(HtmlAttributeName.ACCESSKEY, value);
  }

  /// Renders the `action` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute action(String value) {
    return attr0(HtmlAttributeName.ACTION, value);
  }

  /// Renders the `align` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute align(String value) {
    return attr0(HtmlAttributeName.ALIGN, value);
  }

  /// Renders the `alignment-baseline` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute alignmentBaseline(String value) {
    return attr0(HtmlAttributeName.ALIGNMENT_BASELINE, value);
  }

  /// Renders the `alt` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute alt(String value) {
    return attr0(HtmlAttributeName.ALT, value);
  }

  /// Renders the `aria-hidden` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute ariaHidden(String value) {
    return attr0(HtmlAttributeName.ARIA_HIDDEN, value);
  }

  /// Renders the `aria-label` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute ariaLabel(String value) {
    return attr0(HtmlAttributeName.ARIA_LABEL, value);
  }

  /// Renders the `as` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute as(String value) {
    return attr0(HtmlAttributeName.AS, value);
  }

  /// Renders the `autocomplete` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute autocomplete(String value) {
    return attr0(HtmlAttributeName.AUTOCOMPLETE, value);
  }

  /// Renders the `baseline-shift` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute baselineShift(String value) {
    return attr0(HtmlAttributeName.BASELINE_SHIFT, value);
  }

  /// Renders the `border` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute border(String value) {
    return attr0(HtmlAttributeName.BORDER, value);
  }

  /// Renders the `cellpadding` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute cellpadding(String value) {
    return attr0(HtmlAttributeName.CELLPADDING, value);
  }

  /// Renders the `cellspacing` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute cellspacing(String value) {
    return attr0(HtmlAttributeName.CELLSPACING, value);
  }

  /// Renders the `charset` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute charset(String value) {
    return attr0(HtmlAttributeName.CHARSET, value);
  }

  /// Renders the `cite` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute cite(String value) {
    return attr0(HtmlAttributeName.CITE, value);
  }

  /// Renders the `class` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute className(String value) {
    return attr0(HtmlAttributeName.CLASS, value);
  }

  /// Renders the `clip-rule` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute clipRule(String value) {
    return attr0(HtmlAttributeName.CLIP_RULE, value);
  }

  /// Renders the `closedby` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute closedby(String value) {
    return attr0(HtmlAttributeName.CLOSEDBY, value);
  }

  /// Renders the `color` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute color(String value) {
    return attr0(HtmlAttributeName.COLOR, value);
  }

  /// Renders the `color-interpolation` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute colorInterpolation(String value) {
    return attr0(HtmlAttributeName.COLOR_INTERPOLATION, value);
  }

  /// Renders the `color-interpolation-filters` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute colorInterpolationFilters(String value) {
    return attr0(HtmlAttributeName.COLOR_INTERPOLATION_FILTERS, value);
  }

  /// Renders the `cols` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute cols(String value) {
    return attr0(HtmlAttributeName.COLS, value);
  }

  /// Renders the `content` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute content(String value) {
    return attr0(HtmlAttributeName.CONTENT, value);
  }

  /// Renders the `contenteditable` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute contenteditable(String value) {
    return attr0(HtmlAttributeName.CONTENTEDITABLE, value);
  }

  /// Renders the `crossorigin` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute crossorigin(String value) {
    return attr0(HtmlAttributeName.CROSSORIGIN, value);
  }

  /// Renders the `cursor` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute cursor(String value) {
    return attr0(HtmlAttributeName.CURSOR, value);
  }

  /// Renders the `d` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute d(String value) {
    return attr0(HtmlAttributeName.D, value);
  }

  /// Renders the `dir` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute dir(String value) {
    return attr0(HtmlAttributeName.DIR, value);
  }

  /// Renders the `direction` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute direction(String value) {
    return attr0(HtmlAttributeName.DIRECTION, value);
  }

  /// Renders the `dirname` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute dirname(String value) {
    return attr0(HtmlAttributeName.DIRNAME, value);
  }

  /// Renders the `display` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute display(String value) {
    return attr0(HtmlAttributeName.DISPLAY, value);
  }

  /// Renders the `dominant-baseline` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute dominantBaseline(String value) {
    return attr0(HtmlAttributeName.DOMINANT_BASELINE, value);
  }

  /// Renders the `draggable` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute draggable(String value) {
    return attr0(HtmlAttributeName.DRAGGABLE, value);
  }

  /// Renders the `enctype` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute enctype(String value) {
    return attr0(HtmlAttributeName.ENCTYPE, value);
  }

  /// Renders the `fill` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute fill(String value) {
    return attr0(HtmlAttributeName.FILL, value);
  }

  /// Renders the `fill-opacity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute fillOpacity(String value) {
    return attr0(HtmlAttributeName.FILL_OPACITY, value);
  }

  /// Renders the `fill-rule` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute fillRule(String value) {
    return attr0(HtmlAttributeName.FILL_RULE, value);
  }

  /// Renders the `filter` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute filter(String value) {
    return attr0(HtmlAttributeName.FILTER, value);
  }

  /// Renders the `flood-color` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute floodColor(String value) {
    return attr0(HtmlAttributeName.FLOOD_COLOR, value);
  }

  /// Renders the `flood-opacity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute floodOpacity(String value) {
    return attr0(HtmlAttributeName.FLOOD_OPACITY, value);
  }

  /// Renders the `for` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute forId(String value) {
    return attr0(HtmlAttributeName.FOR, value);
  }

  /// Renders the `glyph-orientation-horizontal` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute glyphOrientationHorizontal(String value) {
    return attr0(HtmlAttributeName.GLYPH_ORIENTATION_HORIZONTAL, value);
  }

  /// Renders the `glyph-orientation-vertical` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute glyphOrientationVertical(String value) {
    return attr0(HtmlAttributeName.GLYPH_ORIENTATION_VERTICAL, value);
  }

  /// Renders the `height` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute height(String value) {
    return attr0(HtmlAttributeName.HEIGHT, value);
  }

  /// Renders the `href` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute href(String value) {
    return attr0(HtmlAttributeName.HREF, value);
  }

  /// Renders the `http-equiv` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute httpEquiv(String value) {
    return attr0(HtmlAttributeName.HTTP_EQUIV, value);
  }

  /// Renders the `id` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute id(String value) {
    return attr0(HtmlAttributeName.ID, value);
  }

  /// Renders the `image-rendering` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute imageRendering(String value) {
    return attr0(HtmlAttributeName.IMAGE_RENDERING, value);
  }

  /// Renders the `integrity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute integrity(String value) {
    return attr0(HtmlAttributeName.INTEGRITY, value);
  }

  /// Renders the `lang` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute lang(String value) {
    return attr0(HtmlAttributeName.LANG, value);
  }

  /// Renders the `letter-spacing` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute letterSpacing(String value) {
    return attr0(HtmlAttributeName.LETTER_SPACING, value);
  }

  /// Renders the `lighting-color` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute lightingColor(String value) {
    return attr0(HtmlAttributeName.LIGHTING_COLOR, value);
  }

  /// Renders the `marker-end` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute markerEnd(String value) {
    return attr0(HtmlAttributeName.MARKER_END, value);
  }

  /// Renders the `marker-mid` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute markerMid(String value) {
    return attr0(HtmlAttributeName.MARKER_MID, value);
  }

  /// Renders the `marker-start` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute markerStart(String value) {
    return attr0(HtmlAttributeName.MARKER_START, value);
  }

  /// Renders the `mask` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute mask(String value) {
    return attr0(HtmlAttributeName.MASK, value);
  }

  /// Renders the `mask-type` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute maskType(String value) {
    return attr0(HtmlAttributeName.MASK_TYPE, value);
  }

  /// Renders the `maxlength` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute maxlength(String value) {
    return attr0(HtmlAttributeName.MAXLENGTH, value);
  }

  /// Renders the `media` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute media(String value) {
    return attr0(HtmlAttributeName.MEDIA, value);
  }

  /// Renders the `method` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute method(String value) {
    return attr0(HtmlAttributeName.METHOD, value);
  }

  /// Renders the `minlength` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute minlength(String value) {
    return attr0(HtmlAttributeName.MINLENGTH, value);
  }

  /// Renders the `name` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute name(String value) {
    return attr0(HtmlAttributeName.NAME, value);
  }

  /// Renders the `onafterprint` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onafterprint(String value) {
    return attr0(HtmlAttributeName.ONAFTERPRINT, value);
  }

  /// Renders the `onbeforeprint` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onbeforeprint(String value) {
    return attr0(HtmlAttributeName.ONBEFOREPRINT, value);
  }

  /// Renders the `onbeforeunload` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onbeforeunload(String value) {
    return attr0(HtmlAttributeName.ONBEFOREUNLOAD, value);
  }

  /// Renders the `onclick` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onclick(String value) {
    return attr0(HtmlAttributeName.ONCLICK, value);
  }

  /// Renders the `onhashchange` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onhashchange(String value) {
    return attr0(HtmlAttributeName.ONHASHCHANGE, value);
  }

  /// Renders the `onlanguagechange` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onlanguagechange(String value) {
    return attr0(HtmlAttributeName.ONLANGUAGECHANGE, value);
  }

  /// Renders the `onmessage` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onmessage(String value) {
    return attr0(HtmlAttributeName.ONMESSAGE, value);
  }

  /// Renders the `onoffline` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onoffline(String value) {
    return attr0(HtmlAttributeName.ONOFFLINE, value);
  }

  /// Renders the `ononline` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute ononline(String value) {
    return attr0(HtmlAttributeName.ONONLINE, value);
  }

  /// Renders the `onpagehide` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onpagehide(String value) {
    return attr0(HtmlAttributeName.ONPAGEHIDE, value);
  }

  /// Renders the `onpageshow` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onpageshow(String value) {
    return attr0(HtmlAttributeName.ONPAGESHOW, value);
  }

  /// Renders the `onpopstate` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onpopstate(String value) {
    return attr0(HtmlAttributeName.ONPOPSTATE, value);
  }

  /// Renders the `onrejectionhandled` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onrejectionhandled(String value) {
    return attr0(HtmlAttributeName.ONREJECTIONHANDLED, value);
  }

  /// Renders the `onstorage` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onstorage(String value) {
    return attr0(HtmlAttributeName.ONSTORAGE, value);
  }

  /// Renders the `onsubmit` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onsubmit(String value) {
    return attr0(HtmlAttributeName.ONSUBMIT, value);
  }

  /// Renders the `onunhandledrejection` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onunhandledrejection(String value) {
    return attr0(HtmlAttributeName.ONUNHANDLEDREJECTION, value);
  }

  /// Renders the `onunload` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute onunload(String value) {
    return attr0(HtmlAttributeName.ONUNLOAD, value);
  }

  /// Renders the `opacity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute opacity(String value) {
    return attr0(HtmlAttributeName.OPACITY, value);
  }

  /// Renders the `overflow` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute overflow(String value) {
    return attr0(HtmlAttributeName.OVERFLOW, value);
  }

  /// Renders the `paint-order` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute paintOrder(String value) {
    return attr0(HtmlAttributeName.PAINT_ORDER, value);
  }

  /// Renders the `placeholder` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute placeholder(String value) {
    return attr0(HtmlAttributeName.PLACEHOLDER, value);
  }

  /// Renders the `pointer-events` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute pointerEvents(String value) {
    return attr0(HtmlAttributeName.POINTER_EVENTS, value);
  }

  /// Renders the `property` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute property(String value) {
    return attr0(HtmlAttributeName.PROPERTY, value);
  }

  /// Renders the `referrerpolicy` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute referrerpolicy(String value) {
    return attr0(HtmlAttributeName.REFERRERPOLICY, value);
  }

  /// Renders the `rel` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute rel(String value) {
    return attr0(HtmlAttributeName.REL, value);
  }

  /// Renders the `rev` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute rev(String value) {
    return attr0(HtmlAttributeName.REV, value);
  }

  /// Renders the `role` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute role(String value) {
    return attr0(HtmlAttributeName.ROLE, value);
  }

  /// Renders the `rows` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute rows(String value) {
    return attr0(HtmlAttributeName.ROWS, value);
  }

  /// Renders the `shape-rendering` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute shapeRendering(String value) {
    return attr0(HtmlAttributeName.SHAPE_RENDERING, value);
  }

  /// Renders the `size` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute size(String value) {
    return attr0(HtmlAttributeName.SIZE, value);
  }

  /// Renders the `sizes` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute sizes(String value) {
    return attr0(HtmlAttributeName.SIZES, value);
  }

  /// Renders the `spellcheck` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute spellcheck(String value) {
    return attr0(HtmlAttributeName.SPELLCHECK, value);
  }

  /// Renders the `src` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute src(String value) {
    return attr0(HtmlAttributeName.SRC, value);
  }

  /// Renders the `srcset` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute srcset(String value) {
    return attr0(HtmlAttributeName.SRCSET, value);
  }

  /// Renders the `start` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute start(String value) {
    return attr0(HtmlAttributeName.START, value);
  }

  /// Renders the `stop-color` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute stopColor(String value) {
    return attr0(HtmlAttributeName.STOP_COLOR, value);
  }

  /// Renders the `stop-opacity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute stopOpacity(String value) {
    return attr0(HtmlAttributeName.STOP_OPACITY, value);
  }

  /// Renders the `stroke` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute stroke(String value) {
    return attr0(HtmlAttributeName.STROKE, value);
  }

  /// Renders the `stroke-dasharray` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeDasharray(String value) {
    return attr0(HtmlAttributeName.STROKE_DASHARRAY, value);
  }

  /// Renders the `stroke-dashoffset` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeDashoffset(String value) {
    return attr0(HtmlAttributeName.STROKE_DASHOFFSET, value);
  }

  /// Renders the `stroke-linecap` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeLinecap(String value) {
    return attr0(HtmlAttributeName.STROKE_LINECAP, value);
  }

  /// Renders the `stroke-linejoin` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeLinejoin(String value) {
    return attr0(HtmlAttributeName.STROKE_LINEJOIN, value);
  }

  /// Renders the `stroke-miterlimit` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeMiterlimit(String value) {
    return attr0(HtmlAttributeName.STROKE_MITERLIMIT, value);
  }

  /// Renders the `stroke-opacity` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeOpacity(String value) {
    return attr0(HtmlAttributeName.STROKE_OPACITY, value);
  }

  /// Renders the `stroke-width` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute strokeWidth(String value) {
    return attr0(HtmlAttributeName.STROKE_WIDTH, value);
  }

  /// Renders the `tabindex` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute tabindex(String value) {
    return attr0(HtmlAttributeName.TABINDEX, value);
  }

  /// Renders the `target` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute target(String value) {
    return attr0(HtmlAttributeName.TARGET, value);
  }

  /// Renders the `text-anchor` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute textAnchor(String value) {
    return attr0(HtmlAttributeName.TEXT_ANCHOR, value);
  }

  /// Renders the `text-decoration` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute textDecoration(String value) {
    return attr0(HtmlAttributeName.TEXT_DECORATION, value);
  }

  /// Renders the `text-overflow` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute textOverflow(String value) {
    return attr0(HtmlAttributeName.TEXT_OVERFLOW, value);
  }

  /// Renders the `text-rendering` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute textRendering(String value) {
    return attr0(HtmlAttributeName.TEXT_RENDERING, value);
  }

  /// Renders the `transform` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute transform(String value) {
    return attr0(HtmlAttributeName.TRANSFORM, value);
  }

  /// Renders the `transform-origin` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute transformOrigin(String value) {
    return attr0(HtmlAttributeName.TRANSFORM_ORIGIN, value);
  }

  /// Renders the `translate` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute translate(String value) {
    return attr0(HtmlAttributeName.TRANSLATE, value);
  }

  /// Renders the `type` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute type(String value) {
    return attr0(HtmlAttributeName.TYPE, value);
  }

  /// Renders the `unicode-bidi` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute unicodeBidi(String value) {
    return attr0(HtmlAttributeName.UNICODE_BIDI, value);
  }

  /// Renders the `value` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute value(String value) {
    return attr0(HtmlAttributeName.VALUE, value);
  }

  /// Renders the `vector-effect` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute vectorEffect(String value) {
    return attr0(HtmlAttributeName.VECTOR_EFFECT, value);
  }

  /// Renders the `viewBox` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute viewBox(String value) {
    return attr0(HtmlAttributeName.VIEWBOX, value);
  }

  /// Renders the `visibility` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute visibility(String value) {
    return attr0(HtmlAttributeName.VISIBILITY, value);
  }

  /// Renders the `white-space` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute whiteSpace(String value) {
    return attr0(HtmlAttributeName.WHITE_SPACE, value);
  }

  /// Renders the `width` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute width(String value) {
    return attr0(HtmlAttributeName.WIDTH, value);
  }

  /// Renders the `word-spacing` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute wordSpacing(String value) {
    return attr0(HtmlAttributeName.WORD_SPACING, value);
  }

  /// Renders the `wrap` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute wrap(String value) {
    return attr0(HtmlAttributeName.WRAP, value);
  }

  /// Renders the `writing-mode` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute writingMode(String value) {
    return attr0(HtmlAttributeName.WRITING_MODE, value);
  }

  /// Renders the `xmlns` attribute with the specified value.
  /// @param value the attribute value
  /// @return an instruction representing the attribute
  public final Html.Instruction.OfAttribute xmlns(String value) {
    return attr0(HtmlAttributeName.XMLNS, value);
  }

  //
  // AMBIGUOUS
  //

  abstract Html.Instruction.OfAmbiguous ambiguous(HtmlAmbiguous name, String text);

  /// Renders the `clip-path` attribute or the `clipPath` element with the specified text.
  /// @param text the attribute value or the text content of the element
  /// @return an instruction representing the attribute or the element
  public final Html.Instruction.OfAmbiguous clipPath(String text) {
    return ambiguous(HtmlAmbiguous.CLIPPATH, text);
  }

  /// Renders the `form` attribute or the `form` element with the specified text.
  /// @param text the attribute value or the text content of the element
  /// @return an instruction representing the attribute or the element
  public final Html.Instruction.OfAmbiguous form(String text) {
    return ambiguous(HtmlAmbiguous.FORM, text);
  }

  /// Renders the `label` attribute or the `label` element with the specified text.
  /// @param text the attribute value or the text content of the element
  /// @return an instruction representing the attribute or the element
  public final Html.Instruction.OfAmbiguous label(String text) {
    return ambiguous(HtmlAmbiguous.LABEL, text);
  }

  /// Renders the `style` attribute or the `style` element with the specified text.
  /// @param text the attribute value or the text content of the element
  /// @return an instruction representing the attribute or the element
  public final Html.Instruction.OfAmbiguous style(String text) {
    return ambiguous(HtmlAmbiguous.STYLE, text);
  }

  /// Renders the `title` attribute or the `title` element with the specified text.
  /// @param text the attribute value or the text content of the element
  /// @return an instruction representing the attribute or the element
  public final Html.Instruction.OfAmbiguous title(String text) {
    return ambiguous(HtmlAmbiguous.TITLE, text);
  }

  //
  // TEXT
  //

  /// Renders the non-breaking space `&nbsp;` HTML character entity.
  /// @return an instruction representing the non-breaking space character entity.
  public abstract Html.Instruction.OfElement nbsp();

  /// Renders the specified value as raw HTML.
  /// @param value the raw HTML value
  /// @return a raw HTML instruction
  public abstract Html.Instruction.OfElement raw(String value);

  /// Renders a text node with the specified value.
  /// The text value is escaped before being emitted to the output.
  /// @param value the text value
  /// @return an instruction representing the text node
  public abstract Html.Instruction.OfElement text(String value);

  // END generated code

}
